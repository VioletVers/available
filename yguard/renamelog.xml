<?xml version="1.0" encoding="UTF-8"?>
<yguard version="1.5">
<!--
  yGuard Bytecode Obfuscator, v2.3.0.1, a Product of yWorks GmbH - http://www.yworks.com

  Logfile created on Mon Sep 12 23:28:26 BST 2011

  Jar file to be obfuscated:           dfEditor.jar
  Target Jar file for obfuscated code: dfEditor.jar

-->
<!--
  Memory in use after class data structure built: 93805048 bytes
  Total memory available                        : 324206592 bytes
-->
<expose>
  <class name="dfEditor.animation.AnimationController$RollOverSpinModel"/>
  <class name="dfEditor.animation.AnimationController$CustomSpinModel"/>
  <class name="dfEditor.animation.AnimationController"/>
  <class name="dfEditor.SpriteImageController"/>
  <class name="dfEditor.dfEditorApp"/>
  <method class="dfEditor.dfEditorApp" name="void main(java.lang.String[])"/>
  <class name="dfEditor.dfEditorAboutBoxFree"/>
  <class name="dfEditor.dfEditorView"/>
  <class name="dfEditor.SpritesheetController"/>
  <class name="dfEditor.dfEditorAboutBox"/>
  <class name="dfEditor.SingleOrMultiDialog"/>
</expose>
<map>
  <package name="dfEditor.commands" map="A"/>
  <class name="dfEditor.commands.AddNodeCommand" map="A"/>
  <field class="dfEditor.commands.AddNodeCommand" name="parentNode" map="&#x00c0;"/>
  <field class="dfEditor.commands.AddNodeCommand" name="nameTree" map="&#x00c1;"/>
  <field class="dfEditor.commands.AddNodeCommand" name="prevSelectedPath" map="&#x00c2;"/>
  <field class="dfEditor.commands.AddNodeCommand" name="newNode" map="&#x00c3;"/>
  <method class="dfEditor.commands.AddNodeCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.AddNodeCommand" name="void insertNewNode(dfEditor.CustomNode, javax.swing.tree.DefaultMutableTreeNode)" map="A"/>
  <method class="dfEditor.commands.AddNodeCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.MoveGraphicCommand" map="B"/>
  <field class="dfEditor.commands.MoveGraphicCommand" name="panel" map="A"/>
  <field class="dfEditor.commands.MoveGraphicCommand" name="newRect" map="B"/>
  <field class="dfEditor.commands.MoveGraphicCommand" name="oldRect" map="C"/>
  <field class="dfEditor.commands.MoveGraphicCommand" name="graphic" map="D"/>
  <method class="dfEditor.commands.MoveGraphicCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.MoveGraphicCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.AddSpriteToCellCommand" map="C"/>
  <field class="dfEditor.commands.AddSpriteToCellCommand" name="_graphics" map="E"/>
  <field class="dfEditor.commands.AddSpriteToCellCommand" name="_spriteNode" map="F"/>
  <field class="dfEditor.commands.AddSpriteToCellCommand" name="_point" map="G"/>
  <field class="dfEditor.commands.AddSpriteToCellCommand" name="_animationController" map="H"/>
  <field class="dfEditor.commands.AddSpriteToCellCommand" name="_cell" map="I"/>
  <method class="dfEditor.commands.AddSpriteToCellCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.AddSpriteToCellCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.GroupedUndoableCommand" map="D"/>
  <field class="dfEditor.commands.GroupedUndoableCommand" name="_commands" map="J"/>
  <method class="dfEditor.commands.GroupedUndoableCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.GroupedUndoableCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.RemoveCellCommand" map="E"/>
  <field class="dfEditor.commands.RemoveCellCommand" name="_animationCell" map="K"/>
  <field class="dfEditor.commands.RemoveCellCommand" name="_animation" map="L"/>
  <method class="dfEditor.commands.RemoveCellCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.RemoveCellCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.RemoveGraphicCommand" map="F"/>
  <field class="dfEditor.commands.RemoveGraphicCommand" name="_removeNodeCommand" map="M"/>
  <field class="dfEditor.commands.RemoveGraphicCommand" name="_node" map="N"/>
  <field class="dfEditor.commands.RemoveGraphicCommand" name="_panel" map="O"/>
  <method class="dfEditor.commands.RemoveGraphicCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.RemoveGraphicCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.RotateGraphicListCommand" map="G"/>
  <field class="dfEditor.commands.RotateGraphicListCommand" name="_commands" map="P"/>
  <method class="dfEditor.commands.RotateGraphicListCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.RotateGraphicListCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.RemoveAnimGraphicCommand" map="H"/>
  <field class="dfEditor.commands.RemoveAnimGraphicCommand" name="_zOrder" map="Q"/>
  <field class="dfEditor.commands.RemoveAnimGraphicCommand" name="_animationCell" map="R"/>
  <field class="dfEditor.commands.RemoveAnimGraphicCommand" name="_node" map="S"/>
  <field class="dfEditor.commands.RemoveAnimGraphicCommand" name="_panel" map="T"/>
  <field class="dfEditor.commands.RemoveAnimGraphicCommand" name="_graphic" map="U"/>
  <field class="dfEditor.commands.RemoveAnimGraphicCommand" name="_animation" map="V"/>
  <method class="dfEditor.commands.RemoveAnimGraphicCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.RemoveAnimGraphicCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.AddAnimationCommand" map="I"/>
  <field class="dfEditor.commands.AddAnimationCommand" name="_animation" map="W"/>
  <field class="dfEditor.commands.AddAnimationCommand" name="_animationList" map="X"/>
  <method class="dfEditor.commands.AddAnimationCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.AddAnimationCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.FlipSpriteListCommand" map="J"/>
  <field class="dfEditor.commands.FlipSpriteListCommand" name="_commands" map="Y"/>
  <method class="dfEditor.commands.FlipSpriteListCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.FlipSpriteListCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.SetGraphicAngleCommand" map="K"/>
  <field class="dfEditor.commands.SetGraphicAngleCommand" name="_angle" map="Z"/>
  <field class="dfEditor.commands.SetGraphicAngleCommand" name="_oldAngle" map="_"/>
  <field class="dfEditor.commands.SetGraphicAngleCommand" name="_panel" map="a"/>
  <field class="dfEditor.commands.SetGraphicAngleCommand" name="_graphic" map="b"/>
  <method class="dfEditor.commands.SetGraphicAngleCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.SetGraphicAngleCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.RemoveNodeCommand" map="L"/>
  <field class="dfEditor.commands.RemoveNodeCommand" name="tree" map="c"/>
  <field class="dfEditor.commands.RemoveNodeCommand" name="nodeParent" map="d"/>
  <field class="dfEditor.commands.RemoveNodeCommand" name="prevSelectedPath" map="e"/>
  <field class="dfEditor.commands.RemoveNodeCommand" name="node" map="f"/>
  <field class="dfEditor.commands.RemoveNodeCommand" name="nodeIndex" map="g"/>
  <method class="dfEditor.commands.RemoveNodeCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.RemoveNodeCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.SetGraphicZOrderCommand" map="M"/>
  <field class="dfEditor.commands.SetGraphicZOrderCommand" name="cell" map="h"/>
  <field class="dfEditor.commands.SetGraphicZOrderCommand" name="controller" map="i"/>
  <field class="dfEditor.commands.SetGraphicZOrderCommand" name="oldValue" map="j"/>
  <field class="dfEditor.commands.SetGraphicZOrderCommand" name="zValue" map="k"/>
  <field class="dfEditor.commands.SetGraphicZOrderCommand" name="graphic" map="l"/>
  <method class="dfEditor.commands.SetGraphicZOrderCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.SetGraphicZOrderCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.RemoveAnimationCommand" map="N"/>
  <field class="dfEditor.commands.RemoveAnimationCommand" name="index" map="m"/>
  <field class="dfEditor.commands.RemoveAnimationCommand" name="_animation" map="n"/>
  <field class="dfEditor.commands.RemoveAnimationCommand" name="_animationList" map="o"/>
  <method class="dfEditor.commands.RemoveAnimationCommand" name="int getIndexOfObjectInList(java.lang.Object, javax.swing.JList)" map="A"/>
  <method class="dfEditor.commands.RemoveAnimationCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.RemoveAnimationCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.AddCellCommand" map="O"/>
  <field class="dfEditor.commands.AddCellCommand" name="_animationCell" map="p"/>
  <field class="dfEditor.commands.AddCellCommand" name="_animationCellToCopy" map="q"/>
  <field class="dfEditor.commands.AddCellCommand" name="_animation" map="r"/>
  <method class="dfEditor.commands.AddCellCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.AddCellCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.AddDirNodeCommand" map="P"/>
  <method class="dfEditor.commands.AddDirNodeCommand" name="void insertNewNode(dfEditor.CustomNode, javax.swing.tree.DefaultMutableTreeNode)" map="A"/>
  <class name="dfEditor.commands.AddGraphicListToSheetCommand" map="Q"/>
  <field class="dfEditor.commands.AddGraphicListToSheetCommand" name="_commands" map="s"/>
  <method class="dfEditor.commands.AddGraphicListToSheetCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.AddGraphicListToSheetCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.AddGraphicToSheetCommand" map="R"/>
  <field class="dfEditor.commands.AddGraphicToSheetCommand" name="_newNode" map="t"/>
  <field class="dfEditor.commands.AddGraphicToSheetCommand" name="_newNodeCommand" map="u"/>
  <field class="dfEditor.commands.AddGraphicToSheetCommand" name="_graphicPanel" map="v"/>
  <field class="dfEditor.commands.AddGraphicToSheetCommand" name="_graphic" map="w"/>
  <field class="dfEditor.commands.AddGraphicToSheetCommand" name="_tree" map="x"/>
  <field class="dfEditor.commands.AddGraphicToSheetCommand" name="_parentNode" map="y"/>
  <method class="dfEditor.commands.AddGraphicToSheetCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.AddGraphicToSheetCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.RemoveGraphicListCommand" map="S"/>
  <field class="dfEditor.commands.RemoveGraphicListCommand" name="_commands" map="z"/>
  <method class="dfEditor.commands.RemoveGraphicListCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.RemoveGraphicListCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.RemoveDirCommand" map="T"/>
  <field class="dfEditor.commands.RemoveDirCommand" name="tree" map="&#x00a2;"/>
  <field class="dfEditor.commands.RemoveDirCommand" name="panel" map="&#x00a3;"/>
  <field class="dfEditor.commands.RemoveDirCommand" name="commandStack" map="&#x00a4;"/>
  <field class="dfEditor.commands.RemoveDirCommand" name="node" map="&#x00a5;"/>
  <method class="dfEditor.commands.RemoveDirCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.RemoveDirCommand" name="void remove(dfEditor.CustomNode)" map="A"/>
  <method class="dfEditor.commands.RemoveDirCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.FlipSpriteCommand" map="U"/>
  <field class="dfEditor.commands.FlipSpriteCommand" name="_bHoriz" map="&#x00aa;"/>
  <field class="dfEditor.commands.FlipSpriteCommand" name="_panel" map="&#x00b5;"/>
  <field class="dfEditor.commands.FlipSpriteCommand" name="_graphic" map="&#x00ba;"/>
  <method class="dfEditor.commands.FlipSpriteCommand" name="boolean execute()" map="A"/>
  <method class="dfEditor.commands.FlipSpriteCommand" name="void undo()" map="B"/>
  <class name="dfEditor.commands.AddLeafNodeCommand" map="V"/>
  <method class="dfEditor.commands.AddLeafNodeCommand" name="void insertNewNode(dfEditor.CustomNode, javax.swing.tree.DefaultMutableTreeNode)" map="A"/>
  <package name="dfEditor.license" map="B"/>
  <class name="dfEditor.license.LicenseReader" map="A"/>
  <method class="dfEditor.license.LicenseReader" name="boolean checkLicense(java.lang.String)" map="A"/>
  <method class="dfEditor.license.LicenseReader" name="byte[] getKeyedDigest(byte[], byte[])" map="A"/>
  <package name="dfEditor.CustomComponents" map="C"/>
  <class name="dfEditor.CustomComponents.NamedElement" map="A"/>
  <method class="dfEditor.CustomComponents.NamedElement" name="void setName(java.lang.String)" map="A"/>
  <method class="dfEditor.CustomComponents.NamedElement" name="java.lang.String getName()" map="A"/>
  <class name="dfEditor.CustomComponents.ListCellEditor" map="B"/>
  <method class="dfEditor.CustomComponents.ListCellEditor" name="java.awt.Component getListCellEditorComponent(javax.swing.JList, java.lang.Object, boolean, int)" map="A"/>
  <class name="dfEditor.CustomComponents.MutableListModel" map="C"/>
  <method class="dfEditor.CustomComponents.MutableListModel" name="boolean isCellEditable(int)" map="A"/>
  <method class="dfEditor.CustomComponents.MutableListModel" name="void setValueAt(java.lang.Object, int)" map="A"/>
  <class name="dfEditor.CustomComponents.JListMutable$CancelEditingAction" map="_A"/>
  <field class="dfEditor.CustomComponents.JListMutable$CancelEditingAction" name="this$0" map="A"/>
  <method class="dfEditor.CustomComponents.JListMutable$CancelEditingAction" name="boolean isEnabled()" map="isEnabled"/>
  <method class="dfEditor.CustomComponents.JListMutable$CancelEditingAction" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.CustomComponents.JListMutable$MouseListener" map="_B"/>
  <field class="dfEditor.CustomComponents.JListMutable$MouseListener" name="this$0" map="A"/>
  <field class="dfEditor.CustomComponents.JListMutable$MouseListener" name="dispatchComponent" map="B"/>
  <method class="dfEditor.CustomComponents.JListMutable$MouseListener" name="void setDispatchComponent(java.awt.event.MouseEvent)" map="A"/>
  <method class="dfEditor.CustomComponents.JListMutable$MouseListener" name="boolean shouldIgnore(java.awt.event.MouseEvent)" map="B"/>
  <method class="dfEditor.CustomComponents.JListMutable$MouseListener" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <method class="dfEditor.CustomComponents.JListMutable$MouseListener" name="boolean repostEvent(java.awt.event.MouseEvent)" map="C"/>
  <class name="dfEditor.CustomComponents.JListMutable$StartEditingAction" map="_C"/>
  <method class="dfEditor.CustomComponents.JListMutable$StartEditingAction" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.CustomComponents.JListMutable$1" map="1"/>
  <class name="dfEditor.CustomComponents.JListMutable$CellEditorRemover" map="_D"/>
  <field class="dfEditor.CustomComponents.JListMutable$CellEditorRemover" name="this$0" map="A"/>
  <field class="dfEditor.CustomComponents.JListMutable$CellEditorRemover" name="focusManager" map="B"/>
  <method class="dfEditor.CustomComponents.JListMutable$CellEditorRemover" name="void propertyChange(java.beans.PropertyChangeEvent)" map="propertyChange"/>
  <class name="dfEditor.CustomComponents.JListMutable" map="D"/>
  <field class="dfEditor.CustomComponents.JListMutable" name="editingIndex" map="A"/>
  <field class="dfEditor.CustomComponents.JListMutable" name="editorRemover" map="B"/>
  <field class="dfEditor.CustomComponents.JListMutable" name="editor" map="C"/>
  <field class="dfEditor.CustomComponents.JListMutable" name="editorComp" map="D"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="void editingCanceled(javax.swing.event.ChangeEvent)" map="editingCanceled"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="void editingStopped(javax.swing.event.ChangeEvent)" map="editingStopped"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="boolean isCellEditable(int)" map="A"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="dfEditor.CustomComponents.ListCellEditor getListCellEditor()" map="A"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="void removeEditor()" map="B"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="void setListCellEditor(dfEditor.CustomComponents.ListCellEditor)" map="A"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="java.awt.Component prepareEditor(int)" map="B"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="java.awt.Component getEditorComponent()" map="C"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="void setValueAt(java.lang.Object, int)" map="A"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="void removeNotify()" map="removeNotify"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="void init()" map="D"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="boolean isEditing()" map="E"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="int getEditingIndex()" map="F"/>
  <method class="dfEditor.CustomComponents.JListMutable" name="boolean editCellAt(int, java.util.EventObject)" map="A"/>
  <class name="dfEditor.CustomComponents.DefaultMutableListModel" map="E"/>
  <method class="dfEditor.CustomComponents.DefaultMutableListModel" name="boolean isCellEditable(int)" map="A"/>
  <method class="dfEditor.CustomComponents.DefaultMutableListModel" name="void setValueAt(java.lang.Object, int)" map="A"/>
  <class name="dfEditor.CustomComponents.DefaultListCellEditor" map="F"/>
  <method class="dfEditor.CustomComponents.DefaultListCellEditor" name="java.awt.Component getListCellEditorComponent(javax.swing.JList, java.lang.Object, boolean, int)" map="A"/>
  <class name="dfEditor.animation.AnimationPanel$1" map="1"/>
  <field class="dfEditor.animation.AnimationPanel$1" name="this$0" map="A"/>
  <field class="dfEditor.animation.AnimationPanel$1" name="val$self" map="B"/>
  <field class="dfEditor.animation.AnimationPanel$1" name="val$origin" map="C"/>
  <method class="dfEditor.animation.AnimationPanel$1" name="void run()" map="run"/>
  <class name="dfEditor.animation.AnimationPanel" map="A"/>
  <field class="dfEditor.animation.AnimationPanel" name="bFirstDraw" map="a"/>
  <field class="dfEditor.animation.AnimationPanel" name="onionSkins" map="b"/>
  <field class="dfEditor.animation.AnimationPanel" name="nodeDroppedListeners" map="c"/>
  <method class="dfEditor.animation.AnimationPanel" name="void dragEnter(java.awt.dnd.DropTargetDragEvent)" map="dragEnter"/>
  <method class="dfEditor.animation.AnimationPanel" name="void dragDropEnd(java.awt.dnd.DragSourceDropEvent)" map="A"/>
  <method class="dfEditor.animation.AnimationPanel" name="void dragGestureRecognized(java.awt.dnd.DragGestureEvent)" map="A"/>
  <method class="dfEditor.animation.AnimationPanel" name="void drawOriginOffscreenIndicator(java.awt.Graphics, java.awt.Dimension)" map="A"/>
  <method class="dfEditor.animation.AnimationPanel" name="void dropActionChanged(java.awt.dnd.DropTargetDragEvent)" map="dropActionChanged"/>
  <method class="dfEditor.animation.AnimationPanel" name="java.awt.Point convertViewPointToActualPoint(java.awt.Point)" map="C"/>
  <method class="dfEditor.animation.AnimationPanel" name="void draw(java.awt.Graphics)" map="B"/>
  <method class="dfEditor.animation.AnimationPanel" name="void dragExit(java.awt.dnd.DropTargetEvent)" map="dragExit"/>
  <method class="dfEditor.animation.AnimationPanel" name="void drawOnionSkins(java.awt.Graphics)" map="C"/>
  <method class="dfEditor.animation.AnimationPanel" name="void drawOriginLines(java.awt.Graphics)" map="D"/>
  <method class="dfEditor.animation.AnimationPanel" name="void dragOver(java.awt.dnd.DropTargetDragEvent)" map="dragOver"/>
  <method class="dfEditor.animation.AnimationPanel" name="void setDragSource(java.awt.Component)" map="A"/>
  <method class="dfEditor.animation.AnimationPanel" name="void setOnionSkins(dfEditor.animation.AnimationCell[])" map="A"/>
  <method class="dfEditor.animation.AnimationPanel" name="void addNodeDroppedListener(dfEditor.NodeDroppedListener)" map="A"/>
  <method class="dfEditor.animation.AnimationPanel" name="void drop(java.awt.dnd.DropTargetDropEvent)" map="drop"/>
  <method class="dfEditor.animation.AnimationPanel" name="void setCell(dfEditor.animation.AnimationCell)" map="A"/>
  <method class="dfEditor.animation.AnimationPanel" name="dfEditor.GraphicObject topGraphicAtPosition(java.awt.Point)" map="B"/>
  <class name="dfEditor.animation.AnimationCell" map="B"/>
  <field class="dfEditor.animation.AnimationCell" name="graphicZOrderDict" map="A"/>
  <field class="dfEditor.animation.AnimationCell" name="delay" map="B"/>
  <field class="dfEditor.animation.AnimationCell" name="graphicNodeDict" map="C"/>
  <field class="dfEditor.animation.AnimationCell" name="vImage" map="D"/>
  <field class="dfEditor.animation.AnimationCell" name="graphicOrderList" map="E"/>
  <method class="dfEditor.animation.AnimationCell" name="void setZOrder(dfEditor.GraphicObject, int)" map="A"/>
  <method class="dfEditor.animation.AnimationCell" name="void setDelay(int)" map="A"/>
  <method class="dfEditor.animation.AnimationCell" name="void draw(java.awt.Graphics, java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.animation.AnimationCell" name="java.util.ArrayList getGraphicList()" map="A"/>
  <method class="dfEditor.animation.AnimationCell" name="dfEditor.CustomNode nodeForGraphic(dfEditor.GraphicObject)" map="A"/>
  <method class="dfEditor.animation.AnimationCell" name="int getDelay()" map="B"/>
  <method class="dfEditor.animation.AnimationCell" name="void addSprite(dfEditor.CustomNode, dfEditor.GraphicObject)" map="A"/>
  <method class="dfEditor.animation.AnimationCell" name="void rebuild()" map="C"/>
  <method class="dfEditor.animation.AnimationCell" name="void removeGraphic(dfEditor.GraphicObject)" map="B"/>
  <method class="dfEditor.animation.AnimationCell" name="int zOrderOfGraphic(dfEditor.GraphicObject)" map="C"/>
  <method class="dfEditor.animation.AnimationCell" name="void swapGraphics(dfEditor.GraphicObject, dfEditor.GraphicObject)" map="A"/>
  <method class="dfEditor.animation.AnimationCell" name="java.awt.Point getImageSize()" map="D"/>
  <method class="dfEditor.animation.AnimationCell" name="java.awt.Rectangle getSpreadRect()" map="E"/>
  <class name="dfEditor.animation.Animation" map="C"/>
  <field class="dfEditor.animation.Animation" name="loops" map="A"/>
  <field class="dfEditor.animation.Animation" name="currentIndex" map="B"/>
  <field class="dfEditor.animation.Animation" name="cellList" map="C"/>
  <field class="dfEditor.animation.Animation" name="name" map="D"/>
  <field class="dfEditor.animation.Animation" name="animationListeners" map="E"/>
  <method class="dfEditor.animation.Animation" name="int getLoops()" map="B"/>
  <method class="dfEditor.animation.Animation" name="dfEditor.animation.AnimationCell getNextCell()" map="C"/>
  <method class="dfEditor.animation.Animation" name="int indexOfCell(dfEditor.animation.AnimationCell)" map="A"/>
  <method class="dfEditor.animation.Animation" name="void setLoops(int)" map="A"/>
  <method class="dfEditor.animation.Animation" name="dfEditor.animation.AnimationCell getCellAtIndex(int)" map="B"/>
  <method class="dfEditor.animation.Animation" name="void removeAnimationListener(dfEditor.animation.AnimationDataListener)" map="A"/>
  <method class="dfEditor.animation.Animation" name="java.lang.String toString()" map="toString"/>
  <method class="dfEditor.animation.Animation" name="void addCell(dfEditor.animation.AnimationCell)" map="B"/>
  <method class="dfEditor.animation.Animation" name="void addAnimationListener(dfEditor.animation.AnimationDataListener)" map="B"/>
  <method class="dfEditor.animation.Animation" name="void setName(java.lang.String)" map="A"/>
  <method class="dfEditor.animation.Animation" name="java.lang.String getName()" map="A"/>
  <method class="dfEditor.animation.Animation" name="void removeCell(dfEditor.animation.AnimationCell)" map="C"/>
  <method class="dfEditor.animation.Animation" name="void moveCell(int, int)" map="A"/>
  <method class="dfEditor.animation.Animation" name="int numCells()" map="D"/>
  <method class="dfEditor.animation.Animation" name="dfEditor.animation.Animation copy()" map="E"/>
  <method class="dfEditor.animation.Animation" name="dfEditor.animation.AnimationCell getCurrentCell()" map="F"/>
  <method class="dfEditor.animation.Animation" name="void setCurrentCellIndex(int)" map="C"/>
  <method class="dfEditor.animation.Animation" name="int getCurrentCellIndex()" map="G"/>
  <class name="dfEditor.animation.AnimationStripPanel$Slot" map="_A"/>
  <field class="dfEditor.animation.AnimationStripPanel$Slot" name="this$0" map="A"/>
  <field class="dfEditor.animation.AnimationStripPanel$Slot" name="cell" map="B"/>
  <field class="dfEditor.animation.AnimationStripPanel$Slot" name="isSelected" map="C"/>
  <field class="dfEditor.animation.AnimationStripPanel$Slot" name="isDragged" map="D"/>
  <field class="dfEditor.animation.AnimationStripPanel$Slot" name="innerRect" map="E"/>
  <field class="dfEditor.animation.AnimationStripPanel$Slot" name="MARGIN" map="F"/>
  <field class="dfEditor.animation.AnimationStripPanel$Slot" name="dragImage" map="G"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="void setDragged(boolean)" map="A"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="java.awt.image.BufferedImage getDragImage()" map="A"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="dfEditor.animation.AnimationCell getCell()" map="B"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="java.awt.image.BufferedImage createTranslucentCopy()" map="C"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="void draw(java.awt.Graphics)" map="A"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="boolean isSelected()" map="D"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="boolean isDragged()" map="E"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="void drawCellInRect(dfEditor.animation.AnimationCell, java.awt.Graphics, java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="java.awt.Rectangle getRect()" map="F"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="void setCell(dfEditor.animation.AnimationCell)" map="A"/>
  <method class="dfEditor.animation.AnimationStripPanel$Slot" name="void setSelected(boolean)" map="B"/>
  <class name="dfEditor.animation.AnimationStripPanel" map="D"/>
  <field class="dfEditor.animation.AnimationStripPanel" name="timer" map="&#x00fd;"/>
  <field class="dfEditor.animation.AnimationStripPanel" name="currentLoop" map="&#x00fe;"/>
  <field class="dfEditor.animation.AnimationStripPanel" name="animation" map="&#x00ff;"/>
  <field class="dfEditor.animation.AnimationStripPanel" name="controller" map="&#x0100;"/>
  <field class="dfEditor.animation.AnimationStripPanel" name="stripListeners" map="&#x0101;"/>
  <field class="dfEditor.animation.AnimationStripPanel" name="currentSlotInAnimationFramesLeft" map="&#x0102;"/>
  <field class="dfEditor.animation.AnimationStripPanel" name="insertBeforeSlotIndex" map="&#x0103;"/>
  <field class="dfEditor.animation.AnimationStripPanel" name="mousePoint" map="&#x0104;"/>
  <field class="dfEditor.animation.AnimationStripPanel" name="slotList" map="&#x0105;"/>
  <field class="dfEditor.animation.AnimationStripPanel" name="currentSlotInAnimation" map="&#x0106;"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void addAnimationStripListener(dfEditor.animation.AnimationStripListener)" map="A"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void play()" map="f"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void mouseReleased(java.awt.event.MouseEvent)" map="mouseReleased"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void stop()" map="g"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void cellRemoved(dfEditor.animation.Animation, dfEditor.animation.AnimationCell)" map="A"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="java.awt.Dimension getStripSize()" map="h"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void mouseDragged(java.awt.event.MouseEvent)" map="mouseDragged"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void addCell(dfEditor.animation.AnimationCell)" map="E"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="int getSelectedSlotIndex()" map="i"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void mouseMoved(java.awt.event.MouseEvent)" map="mouseMoved"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void mouseExited(java.awt.event.MouseEvent)" map="mouseExited"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void selectCell(dfEditor.animation.AnimationCell)" map="F"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void removeAnimationStripListener(dfEditor.animation.AnimationStripListener)" map="B"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="dfEditor.animation.AnimationCell selectedCell()" map="j"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="boolean isPlaying()" map="k"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void setController(dfEditor.animation.AnimationController)" map="B"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="boolean isEmpty()" map="l"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void removeCell(dfEditor.animation.AnimationCell)" map="G"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void setAnimation(dfEditor.animation.Animation)" map="B"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void notifyTick()" map="m"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void cellAdded(dfEditor.animation.Animation, dfEditor.animation.AnimationCell)" map="B"/>
  <method class="dfEditor.animation.AnimationStripPanel" name="void mouseEntered(java.awt.event.MouseEvent)" map="mouseEntered"/>
  <class name="dfEditor.animation.AnimationDataListener" map="E"/>
  <method class="dfEditor.animation.AnimationDataListener" name="void cellRemoved(dfEditor.animation.Animation, dfEditor.animation.AnimationCell)" map="A"/>
  <method class="dfEditor.animation.AnimationDataListener" name="void cellAdded(dfEditor.animation.Animation, dfEditor.animation.AnimationCell)" map="B"/>
  <class name="dfEditor.animation.AnimationController$19" map="19"/>
  <field class="dfEditor.animation.AnimationController$19" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$19" name="void stateChanged(javax.swing.event.ChangeEvent)" map="stateChanged"/>
  <class name="dfEditor.animation.AnimationController$18" map="18"/>
  <field class="dfEditor.animation.AnimationController$18" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$18" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$17" map="17"/>
  <field class="dfEditor.animation.AnimationController$17" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$17" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$16" map="16"/>
  <field class="dfEditor.animation.AnimationController$16" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$16" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$15" map="15"/>
  <field class="dfEditor.animation.AnimationController$15" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$15" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$14" map="14"/>
  <field class="dfEditor.animation.AnimationController$14" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$14" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$13" map="13"/>
  <field class="dfEditor.animation.AnimationController$13" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$13" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$12" map="12"/>
  <field class="dfEditor.animation.AnimationController$12" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$12" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$11" map="11"/>
  <field class="dfEditor.animation.AnimationController$11" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$11" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$10" map="10"/>
  <field class="dfEditor.animation.AnimationController$10" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$10" name="void valueChanged(javax.swing.event.TreeSelectionEvent)" map="valueChanged"/>
  <field class="dfEditor.animation.AnimationController$RollOverSpinModel" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$RollOverSpinModel" name="java.lang.Object getPreviousValue()" map="getPreviousValue"/>
  <method class="dfEditor.animation.AnimationController$RollOverSpinModel" name="java.lang.Object getNextValue()" map="getNextValue"/>
  <class name="dfEditor.animation.AnimationController$9" map="9"/>
  <field class="dfEditor.animation.AnimationController$9" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$9" name="void stateChanged(javax.swing.event.ChangeEvent)" map="stateChanged"/>
  <class name="dfEditor.animation.AnimationController$8" map="8"/>
  <field class="dfEditor.animation.AnimationController$8" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$8" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$7" map="7"/>
  <field class="dfEditor.animation.AnimationController$7" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$7" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="dfEditor.animation.AnimationController$CustomSpinModel" name="this$0" map="A"/>
  <field class="dfEditor.animation.AnimationController$CustomSpinModel" name="value" map="B"/>
  <method class="dfEditor.animation.AnimationController$CustomSpinModel" name="java.lang.Object getPreviousValue()" map="getPreviousValue"/>
  <method class="dfEditor.animation.AnimationController$CustomSpinModel" name="void setValue(java.lang.Object)" map="setValue"/>
  <method class="dfEditor.animation.AnimationController$CustomSpinModel" name="java.lang.Integer parse()" map="A"/>
  <method class="dfEditor.animation.AnimationController$CustomSpinModel" name="java.lang.Object getValue()" map="getValue"/>
  <method class="dfEditor.animation.AnimationController$CustomSpinModel" name="java.lang.Object getNextValue()" map="getNextValue"/>
  <class name="dfEditor.animation.AnimationController$6" map="6"/>
  <field class="dfEditor.animation.AnimationController$6" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$6" name="void stateChanged(javax.swing.event.ChangeEvent)" map="stateChanged"/>
  <class name="dfEditor.animation.AnimationController$5" map="5"/>
  <field class="dfEditor.animation.AnimationController$5" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$4" map="4"/>
  <field class="dfEditor.animation.AnimationController$4" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$3" map="3"/>
  <field class="dfEditor.animation.AnimationController$3" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$23" map="23"/>
  <field class="dfEditor.animation.AnimationController$23" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$23" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$2" map="2"/>
  <field class="dfEditor.animation.AnimationController$2" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$22" map="22"/>
  <field class="dfEditor.animation.AnimationController$22" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$22" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$1" map="1"/>
  <field class="dfEditor.animation.AnimationController$1" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$1" name="void run()" map="run"/>
  <class name="dfEditor.animation.AnimationController$21" map="21"/>
  <field class="dfEditor.animation.AnimationController$21" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$21" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.animation.AnimationController$20" map="20"/>
  <field class="dfEditor.animation.AnimationController$20" name="this$0" map="A"/>
  <method class="dfEditor.animation.AnimationController$20" name="void stateChanged(javax.swing.event.ChangeEvent)" map="stateChanged"/>
  <field class="dfEditor.animation.AnimationController" name="playButton" map="G"/>
  <field class="dfEditor.animation.AnimationController" name="spinnerStateTimer" map="H"/>
  <field class="dfEditor.animation.AnimationController" name="angleLabel" map="I"/>
  <field class="dfEditor.animation.AnimationController" name="addCellButton" map="J"/>
  <field class="dfEditor.animation.AnimationController" name="zOrderSpinner" map="K"/>
  <field class="dfEditor.animation.AnimationController" name="controlPanel" map="L"/>
  <field class="dfEditor.animation.AnimationController" name="bufferedImage" map="M"/>
  <field class="dfEditor.animation.AnimationController" name="angleSpinner" map="N"/>
  <field class="dfEditor.animation.AnimationController" name="modifySpriteToggle" map="O"/>
  <field class="dfEditor.animation.AnimationController" name="loadedSpritesheetFile" map="P"/>
  <field class="dfEditor.animation.AnimationController" name="spriteListToggle" map="Q"/>
  <field class="dfEditor.animation.AnimationController" name="onionSkinsCheckBox" map="R"/>
  <field class="dfEditor.animation.AnimationController" name="addToFrameButton" map="S"/>
  <field class="dfEditor.animation.AnimationController" name="spritePreviewTitle" map="T"/>
  <field class="dfEditor.animation.AnimationController" name="rotateCWButton" map="U"/>
  <field class="dfEditor.animation.AnimationController" name="workingCell" map="V"/>
  <field class="dfEditor.animation.AnimationController" name="viewPanel" map="W"/>
  <field class="dfEditor.animation.AnimationController" name="spriteTree" map="X"/>
  <field class="dfEditor.animation.AnimationController" name="removeSpriteButton" map="Y"/>
  <field class="dfEditor.animation.AnimationController" name="_rotatingGraphics" map="Z"/>
  <field class="dfEditor.animation.AnimationController" name="spriteList" map="_"/>
  <field class="dfEditor.animation.AnimationController" name="loopLabel" map="a"/>
  <field class="dfEditor.animation.AnimationController" name="zoomOutButton" map="b"/>
  <field class="dfEditor.animation.AnimationController" name="removeAnimationButton" map="c"/>
  <field class="dfEditor.animation.AnimationController" name="animationPanel1" map="d"/>
  <field class="dfEditor.animation.AnimationController" name="duplicateAnimationButton" map="e"/>
  <field class="dfEditor.animation.AnimationController" name="zoomInButton" map="f"/>
  <field class="dfEditor.animation.AnimationController" name="animationStripScrollPane" map="g"/>
  <field class="dfEditor.animation.AnimationController" name="jPanel7" map="h"/>
  <field class="dfEditor.animation.AnimationController" name="jPanel6" map="i"/>
  <field class="dfEditor.animation.AnimationController" name="jPanel5" map="j"/>
  <field class="dfEditor.animation.AnimationController" name="jPanel4" map="k"/>
  <field class="dfEditor.animation.AnimationController" name="jPanel3" map="l"/>
  <field class="dfEditor.animation.AnimationController" name="jPanel2" map="m"/>
  <field class="dfEditor.animation.AnimationController" name="jPanel1" map="n"/>
  <field class="dfEditor.animation.AnimationController" name="jLabel1" map="o"/>
  <field class="dfEditor.animation.AnimationController" name="addAnimationButton" map="p"/>
  <field class="dfEditor.animation.AnimationController" name="spriteListControlPanel" map="q"/>
  <field class="dfEditor.animation.AnimationController" name="zOrderLabel" map="r"/>
  <field class="dfEditor.animation.AnimationController" name="flipVCheckBox" map="s"/>
  <field class="dfEditor.animation.AnimationController" name="delaySpinner" map="t"/>
  <field class="dfEditor.animation.AnimationController" name="animationStripPanel" map="u"/>
  <field class="dfEditor.animation.AnimationController" name="loopSpinner" map="v"/>
  <field class="dfEditor.animation.AnimationController" name="flipHCheckBox" map="w"/>
  <field class="dfEditor.animation.AnimationController" name="removeCellButton" map="z"/>
  <field class="dfEditor.animation.AnimationController" name="animationList" map="&#x00a2;"/>
  <field class="dfEditor.animation.AnimationController" name="jScrollPane3" map="&#x00a3;"/>
  <field class="dfEditor.animation.AnimationController" name="jToolBar1" map="&#x00a4;"/>
  <field class="dfEditor.animation.AnimationController" name="jScrollPane2" map="&#x00a5;"/>
  <field class="dfEditor.animation.AnimationController" name="rotateACWButton" map="&#x00aa;"/>
  <field class="dfEditor.animation.AnimationController" name="jScrollPane1" map="&#x00b5;"/>
  <field class="dfEditor.animation.AnimationController" name="spritePreviewPanel" map="&#x00ba;"/>
  <method class="dfEditor.animation.AnimationController" name="java.util.ArrayList addNodeToCell(dfEditor.CustomNode, dfEditor.animation.AnimationCell, java.awt.Point)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void flipHCheckBoxActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void rotateACWButtonActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.animation.AnimationController" name="void graphicAdded(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="B"/>
  <method class="dfEditor.animation.AnimationController" name="void addCellButtonActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <method class="dfEditor.animation.AnimationController" name="void access$1600(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void animatedToCell(dfEditor.animation.AnimationCell)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void showParseError()" map="I"/>
  <method class="dfEditor.animation.AnimationController" name="void spriteTreeValueChanged(javax.swing.event.TreeSelectionEvent)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void access$2100(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.animation.AnimationController" name="void setWorkingCell(dfEditor.animation.AnimationCell)" map="B"/>
  <method class="dfEditor.animation.AnimationController" name="void zoomInButtonActionPerformed(java.awt.event.ActionEvent)" map="D"/>
  <method class="dfEditor.animation.AnimationController" name="void addToFrameButtonActionPerformed(java.awt.event.ActionEvent)" map="E"/>
  <method class="dfEditor.animation.AnimationController" name="void access$1800(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="C"/>
  <method class="dfEditor.animation.AnimationController" name="void access$1700(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="D"/>
  <method class="dfEditor.animation.AnimationController" name="void initComponents()" map="J"/>
  <method class="dfEditor.animation.AnimationController" name="boolean saveAs()" map="D"/>
  <method class="dfEditor.animation.AnimationController" name="void removeSpriteButtonActionPerformed(java.awt.event.ActionEvent)" map="F"/>
  <method class="dfEditor.animation.AnimationController" name="void access$2200(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="E"/>
  <method class="dfEditor.animation.AnimationController" name="void addAnimation(dfEditor.animation.Animation)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void access$000(dfEditor.animation.AnimationController)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void onionSkinsCheckBoxActionPerformed(java.awt.event.ActionEvent)" map="G"/>
  <method class="dfEditor.animation.AnimationController" name="void nodeDropped(java.awt.Component, java.lang.String, java.awt.Point)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="dfEditor.animation.AnimationCell getWorkingCell()" map="K"/>
  <method class="dfEditor.animation.AnimationController" name="void access$2300(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="F"/>
  <method class="dfEditor.animation.AnimationController" name="void setSpritesheetFile(java.io.File)" map="B"/>
  <method class="dfEditor.animation.AnimationController" name="void loopSpinnerStateChanged(javax.swing.event.ChangeEvent)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void graphicsErased(dfEditor.GraphicPanel, java.util.ArrayList)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void zOrderSpinnerStateChanged(javax.swing.event.ChangeEvent)" map="B"/>
  <method class="dfEditor.animation.AnimationController" name="void access$200(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="G"/>
  <method class="dfEditor.animation.AnimationController" name="void spriteTreeDoubleClicked(dfEditor.CustomNode)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void internalFrameActivated(javax.swing.event.InternalFrameEvent)" map="internalFrameActivated"/>
  <method class="dfEditor.animation.AnimationController" name="void removeAnimationButtonActionPerformed(java.awt.event.ActionEvent)" map="H"/>
  <method class="dfEditor.animation.AnimationController" name="void flipVCheckBoxActionPerformed(java.awt.event.ActionEvent)" map="I"/>
  <method class="dfEditor.animation.AnimationController" name="void addAnimationButtonActionPerformed(java.awt.event.ActionEvent)" map="J"/>
  <method class="dfEditor.animation.AnimationController" name="void modifySpriteToggleActionPerformed(java.awt.event.ActionEvent)" map="K"/>
  <method class="dfEditor.animation.AnimationController" name="void internalFrameIconified(javax.swing.event.InternalFrameEvent)" map="internalFrameIconified"/>
  <method class="dfEditor.animation.AnimationController" name="void duplicateAnimationButtonActionPerformed(java.awt.event.ActionEvent)" map="L"/>
  <method class="dfEditor.animation.AnimationController" name="void access$400(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="H"/>
  <method class="dfEditor.animation.AnimationController" name="void internalFrameClosing(javax.swing.event.InternalFrameEvent)" map="internalFrameClosing"/>
  <method class="dfEditor.animation.AnimationController" name="void access$300(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="I"/>
  <method class="dfEditor.animation.AnimationController" name="void access$1000(dfEditor.animation.AnimationController, javax.swing.event.TreeSelectionEvent)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void access$500(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="J"/>
  <method class="dfEditor.animation.AnimationController" name="void cellAdded(dfEditor.animation.Animation, dfEditor.animation.AnimationCell)" map="B"/>
  <method class="dfEditor.animation.AnimationController" name="void populateSpriteListFromCell(dfEditor.animation.AnimationCell)" map="C"/>
  <method class="dfEditor.animation.AnimationController" name="void access$1900(dfEditor.animation.AnimationController, javax.swing.event.ChangeEvent)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void internalFrameOpened(javax.swing.event.InternalFrameEvent)" map="internalFrameOpened"/>
  <method class="dfEditor.animation.AnimationController" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <method class="dfEditor.animation.AnimationController" name="void graphicErased(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void access$900(dfEditor.animation.AnimationController, javax.swing.event.ChangeEvent)" map="B"/>
  <method class="dfEditor.animation.AnimationController" name="void access$2000(dfEditor.animation.AnimationController, javax.swing.event.ChangeEvent)" map="C"/>
  <method class="dfEditor.animation.AnimationController" name="void zOrdersChanged(dfEditor.animation.AnimationCell)" map="D"/>
  <method class="dfEditor.animation.AnimationController" name="boolean load(dfEditor.io.AnimationSetReader)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="boolean save()" map="G"/>
  <method class="dfEditor.animation.AnimationController" name="void access$1100(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="K"/>
  <method class="dfEditor.animation.AnimationController" name="void angleSpinnerStateChanged(javax.swing.event.ChangeEvent)" map="C"/>
  <method class="dfEditor.animation.AnimationController" name="void graphicMoved(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="C"/>
  <method class="dfEditor.animation.AnimationController" name="void zoomOutButtonActionPerformed(java.awt.event.ActionEvent)" map="M"/>
  <method class="dfEditor.animation.AnimationController" name="void showSpritesheetChooser()" map="L"/>
  <method class="dfEditor.animation.AnimationController" name="void internalFrameDeactivated(javax.swing.event.InternalFrameEvent)" map="internalFrameDeactivated"/>
  <method class="dfEditor.animation.AnimationController" name="void updateControlPanel(dfEditor.GraphicPanel)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="dfEditor.animation.Animation getWorkingAnimation()" map="M"/>
  <method class="dfEditor.animation.AnimationController" name="void access$600(dfEditor.animation.AnimationController, javax.swing.event.ChangeEvent)" map="D"/>
  <method class="dfEditor.animation.AnimationController" name="void removeCellButtonActionPerformed(java.awt.event.ActionEvent)" map="N"/>
  <method class="dfEditor.animation.AnimationController" name="void internalFrameDeiconified(javax.swing.event.InternalFrameEvent)" map="internalFrameDeiconified"/>
  <method class="dfEditor.animation.AnimationController" name="void delaySpinnerStateChanged(javax.swing.event.ChangeEvent)" map="D"/>
  <method class="dfEditor.animation.AnimationController" name="boolean saveCoords(java.io.File)" map="C"/>
  <method class="dfEditor.animation.AnimationController" name="void internalFrameClosed(javax.swing.event.InternalFrameEvent)" map="internalFrameClosed"/>
  <method class="dfEditor.animation.AnimationController" name="void access$1300(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="L"/>
  <method class="dfEditor.animation.AnimationController" name="void access$1200(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="M"/>
  <method class="dfEditor.animation.AnimationController" name="void setOnionSkins(boolean)" map="B"/>
  <method class="dfEditor.animation.AnimationController" name="void access$700(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="N"/>
  <method class="dfEditor.animation.AnimationController" name="void playButtonActionPerformed(java.awt.event.ActionEvent)" map="O"/>
  <method class="dfEditor.animation.AnimationController" name="void stripIndexSelected(int)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void access$1400(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="O"/>
  <method class="dfEditor.animation.AnimationController" name="void graphicSelectionChanged(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="D"/>
  <method class="dfEditor.animation.AnimationController" name="void access$800(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="P"/>
  <method class="dfEditor.animation.AnimationController" name="void rotateCWButtonActionPerformed(java.awt.event.ActionEvent)" map="P"/>
  <method class="dfEditor.animation.AnimationController" name="void buildAnimatedGif()" map="N"/>
  <method class="dfEditor.animation.AnimationController" name="void cellRemoved(dfEditor.animation.Animation, dfEditor.animation.AnimationCell)" map="A"/>
  <method class="dfEditor.animation.AnimationController" name="void access$1500(dfEditor.animation.AnimationController, java.awt.event.ActionEvent)" map="Q"/>
  <method class="dfEditor.animation.AnimationController" name="void spriteListToggleActionPerformed(java.awt.event.ActionEvent)" map="Q"/>
  <method class="dfEditor.animation.AnimationController" name="void valueChanged(javax.swing.event.ListSelectionEvent)" map="valueChanged"/>
  <method class="dfEditor.animation.AnimationController" name="java.util.ArrayList addNodeToCell(dfEditor.CustomNode, dfEditor.animation.AnimationCell, java.util.ArrayList, java.awt.Point)" map="A"/>
  <class name="dfEditor.animation.AnimationStripListener" map="F"/>
  <method class="dfEditor.animation.AnimationStripListener" name="void animatedToCell(dfEditor.animation.AnimationCell)" map="A"/>
  <package name="dfEditor.command" map="D"/>
  <class name="dfEditor.command.UndoableCommand" map="A"/>
  <method class="dfEditor.command.UndoableCommand" name="void undo()" map="B"/>
  <class name="dfEditor.command.Command" map="B"/>
  <method class="dfEditor.command.Command" name="boolean execute()" map="A"/>
  <class name="dfEditor.command.CommandManager" map="C"/>
  <field class="dfEditor.command.CommandManager" name="redoComponent" map="A"/>
  <field class="dfEditor.command.CommandManager" name="undoStack" map="B"/>
  <field class="dfEditor.command.CommandManager" name="undoComponent" map="C"/>
  <field class="dfEditor.command.CommandManager" name="listener" map="D"/>
  <field class="dfEditor.command.CommandManager" name="redoStack" map="E"/>
  <method class="dfEditor.command.CommandManager" name="void setListener(dfEditor.CommandManagerListener)" map="A"/>
  <method class="dfEditor.command.CommandManager" name="void undo()" map="A"/>
  <method class="dfEditor.command.CommandManager" name="void refreshComponents()" map="B"/>
  <method class="dfEditor.command.CommandManager" name="void clear()" map="C"/>
  <method class="dfEditor.command.CommandManager" name="void execute(dfEditor.command.Command, boolean)" map="A"/>
  <method class="dfEditor.command.CommandManager" name="int sizeOfUndoStack()" map="D"/>
  <method class="dfEditor.command.CommandManager" name="void execute(dfEditor.command.Command)" map="A"/>
  <method class="dfEditor.command.CommandManager" name="void setUndoComponent(java.awt.Component)" map="A"/>
  <method class="dfEditor.command.CommandManager" name="void redo()" map="E"/>
  <method class="dfEditor.command.CommandManager" name="void init()" map="F"/>
  <method class="dfEditor.command.CommandManager" name="void setRedoComponent(java.awt.Component)" map="B"/>
  <package name="dfEditor.io" map="E"/>
  <class name="dfEditor.io.ImageFilter" map="A"/>
  <method class="dfEditor.io.ImageFilter" name="boolean accept(java.io.File)" map="accept"/>
  <method class="dfEditor.io.ImageFilter" name="java.lang.String getDescription()" map="getDescription"/>
  <class name="dfEditor.io.AnimatedGifEncoder" map="B"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="started" map="A"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="palSize" map="B"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="sizeSet" map="C"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="firstFrame" map="D"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="repeat" map="E"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="height" map="F"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="image" map="G"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="pixels" map="H"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="width" map="I"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="closeStream" map="J"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="out" map="K"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="sample" map="L"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="usedEntry" map="M"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="transIndex" map="N"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="indexedPixels" map="O"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="colorDepth" map="P"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="colorTab" map="Q"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="transparent" map="R"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="delay" map="S"/>
  <field class="dfEditor.io.AnimatedGifEncoder" name="dispose" map="T"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void writePixels()" map="A"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void setSize(int, int)" map="A"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="boolean start(java.lang.String)" map="A"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void analyzePixels()" map="B"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void setQuality(int)" map="A"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void writeNetscapeExt()" map="C"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void getImagePixels()" map="D"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void writePalette()" map="E"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void writeLSD()" map="F"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="boolean addFrame(java.awt.image.BufferedImage)" map="A"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void writeShort(int)" map="B"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void setDelay(int)" map="C"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void setFrameRate(float)" map="A"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="int findClosest(java.awt.Color)" map="A"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="boolean finish()" map="G"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void writeGraphicCtrlExt()" map="H"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void setDispose(int)" map="D"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void writeImageDesc()" map="I"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void setTransparent(java.awt.Color)" map="B"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void setRepeat(int)" map="E"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="boolean start(java.io.OutputStream)" map="A"/>
  <method class="dfEditor.io.AnimatedGifEncoder" name="void writeString(java.lang.String)" map="B"/>
  <class name="dfEditor.io.SpritesheetWriter" map="C"/>
  <method class="dfEditor.io.SpritesheetWriter" name="void writeNodeToXml(com.generationjava.io.xml.XmlWriter, dfEditor.CustomNode)" map="A"/>
  <method class="dfEditor.io.SpritesheetWriter" name="void createSpriteSheet(java.io.File, java.lang.String, javax.swing.JTree, int, int)" map="A"/>
  <class name="dfEditor.io.Utils" map="D"/>
  <field class="dfEditor.io.Utils" name="gif" map="A"/>
  <field class="dfEditor.io.Utils" name="jpeg" map="B"/>
  <field class="dfEditor.io.Utils" name="tiff" map="C"/>
  <field class="dfEditor.io.Utils" name="jpg" map="D"/>
  <field class="dfEditor.io.Utils" name="tif" map="E"/>
  <field class="dfEditor.io.Utils" name="png" map="F"/>
  <field class="dfEditor.io.Utils" name="bmp" map="G"/>
  <method class="dfEditor.io.Utils" name="java.lang.String getExtension(java.io.File)" map="A"/>
  <class name="dfEditor.io.AnimationSetWriter" map="E"/>
  <method class="dfEditor.io.AnimationSetWriter" name="void writeAnimToXml(com.generationjava.io.xml.XmlWriter, dfEditor.animation.Animation)" map="A"/>
  <method class="dfEditor.io.AnimationSetWriter" name="void createAnimationSet(java.io.File, java.lang.String, java.util.ArrayList)" map="A"/>
  <class name="dfEditor.io.CustomFilter" map="F"/>
  <field class="dfEditor.io.CustomFilter" name="ext" map="A"/>
  <field class="dfEditor.io.CustomFilter" name="EXT_SPRITE" map="B"/>
  <field class="dfEditor.io.CustomFilter" name="EXT_ANIM" map="C"/>
  <method class="dfEditor.io.CustomFilter" name="java.lang.String getExtension()" map="A"/>
  <method class="dfEditor.io.CustomFilter" name="boolean accept(java.io.File)" map="accept"/>
  <method class="dfEditor.io.CustomFilter" name="void addExtension(java.lang.String)" map="A"/>
  <method class="dfEditor.io.CustomFilter" name="java.lang.String getDescription()" map="getDescription"/>
  <class name="dfEditor.io.SpritesheetReader" map="G"/>
  <field class="dfEditor.io.SpritesheetReader" name="file" map="A"/>
  <field class="dfEditor.io.SpritesheetReader" name="doc" map="B"/>
  <method class="dfEditor.io.SpritesheetReader" name="javax.swing.tree.DefaultTreeModel getTreeModel()" map="A"/>
  <method class="dfEditor.io.SpritesheetReader" name="dfEditor.CustomNode createCustomNodeFromDOMNode(org.w3c.dom.Element)" map="A"/>
  <method class="dfEditor.io.SpritesheetReader" name="java.lang.String getImagePath()" map="B"/>
  <method class="dfEditor.io.SpritesheetReader" name="javax.swing.tree.DefaultTreeModel createTreeModelFromDOM(org.w3c.dom.Element)" map="B"/>
  <class name="dfEditor.io.LZWEncoder" map="H"/>
  <field class="dfEditor.io.LZWEncoder" name="maxmaxcode" map="A"/>
  <field class="dfEditor.io.LZWEncoder" name="BITS" map="B"/>
  <field class="dfEditor.io.LZWEncoder" name="initCodeSize" map="C"/>
  <field class="dfEditor.io.LZWEncoder" name="maxbits" map="D"/>
  <field class="dfEditor.io.LZWEncoder" name="ClearCode" map="E"/>
  <field class="dfEditor.io.LZWEncoder" name="imgW" map="F"/>
  <field class="dfEditor.io.LZWEncoder" name="cur_bits" map="G"/>
  <field class="dfEditor.io.LZWEncoder" name="free_ent" map="H"/>
  <field class="dfEditor.io.LZWEncoder" name="masks" map="I"/>
  <field class="dfEditor.io.LZWEncoder" name="curPixel" map="J"/>
  <field class="dfEditor.io.LZWEncoder" name="HSIZE" map="K"/>
  <field class="dfEditor.io.LZWEncoder" name="maxcode" map="L"/>
  <field class="dfEditor.io.LZWEncoder" name="g_init_bits" map="M"/>
  <field class="dfEditor.io.LZWEncoder" name="imgH" map="N"/>
  <field class="dfEditor.io.LZWEncoder" name="EOFCode" map="O"/>
  <field class="dfEditor.io.LZWEncoder" name="codetab" map="P"/>
  <field class="dfEditor.io.LZWEncoder" name="EOF" map="Q"/>
  <field class="dfEditor.io.LZWEncoder" name="remaining" map="R"/>
  <field class="dfEditor.io.LZWEncoder" name="pixAry" map="S"/>
  <field class="dfEditor.io.LZWEncoder" name="htab" map="T"/>
  <field class="dfEditor.io.LZWEncoder" name="cur_accum" map="U"/>
  <field class="dfEditor.io.LZWEncoder" name="a_count" map="V"/>
  <field class="dfEditor.io.LZWEncoder" name="hsize" map="W"/>
  <field class="dfEditor.io.LZWEncoder" name="n_bits" map="X"/>
  <field class="dfEditor.io.LZWEncoder" name="clear_flg" map="Y"/>
  <field class="dfEditor.io.LZWEncoder" name="accum" map="Z"/>
  <method class="dfEditor.io.LZWEncoder" name="void encode(java.io.OutputStream)" map="A"/>
  <method class="dfEditor.io.LZWEncoder" name="void char_out(byte, java.io.OutputStream)" map="A"/>
  <method class="dfEditor.io.LZWEncoder" name="int nextPixel()" map="A"/>
  <method class="dfEditor.io.LZWEncoder" name="void cl_hash(int)" map="A"/>
  <method class="dfEditor.io.LZWEncoder" name="int MAXCODE(int)" map="B"/>
  <method class="dfEditor.io.LZWEncoder" name="void output(int, java.io.OutputStream)" map="A"/>
  <method class="dfEditor.io.LZWEncoder" name="void cl_block(java.io.OutputStream)" map="B"/>
  <method class="dfEditor.io.LZWEncoder" name="void flush_char(java.io.OutputStream)" map="C"/>
  <method class="dfEditor.io.LZWEncoder" name="void compress(int, java.io.OutputStream)" map="B"/>
  <class name="dfEditor.io.AnimationSetReader" map="I"/>
  <field class="dfEditor.io.AnimationSetReader" name="version" map="A"/>
  <field class="dfEditor.io.AnimationSetReader" name="file" map="B"/>
  <field class="dfEditor.io.AnimationSetReader" name="doc" map="C"/>
  <method class="dfEditor.io.AnimationSetReader" name="java.lang.String getSpriteSheetPath()" map="A"/>
  <method class="dfEditor.io.AnimationSetReader" name="java.util.ArrayList getAnimations(dfEditor.SpriteTree, java.awt.image.BufferedImage)" map="A"/>
  <class name="dfEditor.io.NeuQuant" map="J"/>
  <field class="dfEditor.io.NeuQuant" name="samplefac" map="A"/>
  <field class="dfEditor.io.NeuQuant" name="gammashift" map="B"/>
  <field class="dfEditor.io.NeuQuant" name="radbias" map="C"/>
  <field class="dfEditor.io.NeuQuant" name="ncycles" map="D"/>
  <field class="dfEditor.io.NeuQuant" name="bias" map="E"/>
  <field class="dfEditor.io.NeuQuant" name="radiusdec" map="F"/>
  <field class="dfEditor.io.NeuQuant" name="radiusbias" map="G"/>
  <field class="dfEditor.io.NeuQuant" name="radiusbiasshift" map="H"/>
  <field class="dfEditor.io.NeuQuant" name="network" map="I"/>
  <field class="dfEditor.io.NeuQuant" name="initalpha" map="J"/>
  <field class="dfEditor.io.NeuQuant" name="netindex" map="K"/>
  <field class="dfEditor.io.NeuQuant" name="minpicturebytes" map="L"/>
  <field class="dfEditor.io.NeuQuant" name="gamma" map="M"/>
  <field class="dfEditor.io.NeuQuant" name="betagamma" map="N"/>
  <field class="dfEditor.io.NeuQuant" name="alphadec" map="O"/>
  <field class="dfEditor.io.NeuQuant" name="alphabiasshift" map="P"/>
  <field class="dfEditor.io.NeuQuant" name="thepicture" map="Q"/>
  <field class="dfEditor.io.NeuQuant" name="intbias" map="R"/>
  <field class="dfEditor.io.NeuQuant" name="freq" map="S"/>
  <field class="dfEditor.io.NeuQuant" name="betashift" map="T"/>
  <field class="dfEditor.io.NeuQuant" name="netbiasshift" map="U"/>
  <field class="dfEditor.io.NeuQuant" name="prime4" map="V"/>
  <field class="dfEditor.io.NeuQuant" name="prime3" map="W"/>
  <field class="dfEditor.io.NeuQuant" name="prime2" map="X"/>
  <field class="dfEditor.io.NeuQuant" name="prime1" map="Y"/>
  <field class="dfEditor.io.NeuQuant" name="radbiasshift" map="Z"/>
  <field class="dfEditor.io.NeuQuant" name="beta" map="_"/>
  <field class="dfEditor.io.NeuQuant" name="maxnetpos" map="a"/>
  <field class="dfEditor.io.NeuQuant" name="radpower" map="b"/>
  <field class="dfEditor.io.NeuQuant" name="alpharadbias" map="c"/>
  <field class="dfEditor.io.NeuQuant" name="netsize" map="d"/>
  <field class="dfEditor.io.NeuQuant" name="lengthcount" map="e"/>
  <field class="dfEditor.io.NeuQuant" name="intbiasshift" map="f"/>
  <field class="dfEditor.io.NeuQuant" name="alpharadbshift" map="g"/>
  <field class="dfEditor.io.NeuQuant" name="initradius" map="h"/>
  <field class="dfEditor.io.NeuQuant" name="initrad" map="i"/>
  <method class="dfEditor.io.NeuQuant" name="void alterneigh(int, int, int, int, int)" map="A"/>
  <method class="dfEditor.io.NeuQuant" name="void learn()" map="A"/>
  <method class="dfEditor.io.NeuQuant" name="void altersingle(int, int, int, int, int)" map="B"/>
  <method class="dfEditor.io.NeuQuant" name="int contest(int, int, int)" map="A"/>
  <method class="dfEditor.io.NeuQuant" name="byte[] colorMap()" map="B"/>
  <method class="dfEditor.io.NeuQuant" name="int map(int, int, int)" map="B"/>
  <method class="dfEditor.io.NeuQuant" name="void unbiasnet()" map="C"/>
  <method class="dfEditor.io.NeuQuant" name="byte[] process()" map="D"/>
  <method class="dfEditor.io.NeuQuant" name="void inxbuild()" map="E"/>
  <class name="dfEditor.SpriteGraphic" map="A"/>
  <field class="dfEditor.SpriteGraphic" name="selectedVImage" map="M"/>
  <field class="dfEditor.SpriteGraphic" name="bImage" map="N"/>
  <field class="dfEditor.SpriteGraphic" name="vImage" map="O"/>
  <field class="dfEditor.SpriteGraphic" name="bTrimmed" map="P"/>
  <field class="dfEditor.SpriteGraphic" name="SELECTION_COLOUR" map="Q"/>
  <field class="dfEditor.SpriteGraphic" name="_vFlip" map="R"/>
  <field class="dfEditor.SpriteGraphic" name="untrimmedSubRect" map="S"/>
  <field class="dfEditor.SpriteGraphic" name="SELECTION_BORDER" map="T"/>
  <field class="dfEditor.SpriteGraphic" name="_hFlip" map="U"/>
  <field class="dfEditor.SpriteGraphic" name="subRect" map="V"/>
  <method class="dfEditor.SpriteGraphic" name="void trim()" map="L"/>
  <method class="dfEditor.SpriteGraphic" name="dfEditor.SpriteGraphic copy()" map="M"/>
  <method class="dfEditor.SpriteGraphic" name="boolean isFlippedH()" map="N"/>
  <method class="dfEditor.SpriteGraphic" name="void draw(java.awt.Graphics, java.awt.Point, float, boolean)" map="A"/>
  <method class="dfEditor.SpriteGraphic" name="void flip(boolean)" map="C"/>
  <method class="dfEditor.SpriteGraphic" name="java.awt.image.VolatileImage createVImage()" map="O"/>
  <method class="dfEditor.SpriteGraphic" name="boolean isFlippedV()" map="P"/>
  <method class="dfEditor.SpriteGraphic" name="void constrainToBounds(java.awt.Rectangle)" map="B"/>
  <method class="dfEditor.SpriteGraphic" name="void untrim()" map="Q"/>
  <method class="dfEditor.SpriteGraphic" name="boolean pixelIsTransparent(int, int)" map="A"/>
  <method class="dfEditor.SpriteGraphic" name="java.awt.image.VolatileImage createSelectedVImage()" map="R"/>
  <class name="dfEditor.SpriteTreeListener" map="B"/>
  <method class="dfEditor.SpriteTreeListener" name="void spriteTreeDoubleClicked(dfEditor.CustomNode)" map="A"/>
  <class name="dfEditor.SpriteImagePanel" map="C"/>
  <method class="dfEditor.SpriteImagePanel" name="java.awt.image.BufferedImage getImage()" map="J"/>
  <method class="dfEditor.SpriteImagePanel" name="void setTextureArea(int, int)" map="A"/>
  <method class="dfEditor.SpriteImagePanel" name="void drawStack(java.awt.Graphics)" map="A"/>
  <method class="dfEditor.SpriteImagePanel" name="void draw(java.awt.Graphics)" map="B"/>
  <class name="dfEditor.SpriteImageController$9" map="9"/>
  <field class="dfEditor.SpriteImageController$9" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$9" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$8" map="8"/>
  <field class="dfEditor.SpriteImageController$8" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$8" name="void valueChanged(javax.swing.event.TreeSelectionEvent)" map="valueChanged"/>
  <class name="dfEditor.SpriteImageController$7" map="7"/>
  <field class="dfEditor.SpriteImageController$7" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$7" name="void mouseReleased(java.awt.event.MouseEvent)" map="mouseReleased"/>
  <method class="dfEditor.SpriteImageController$7" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <class name="dfEditor.SpriteImageController$16" map="16"/>
  <field class="dfEditor.SpriteImageController$16" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$16" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$6" map="6"/>
  <field class="dfEditor.SpriteImageController$6" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$15" map="15"/>
  <field class="dfEditor.SpriteImageController$15" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$15" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$5" map="5"/>
  <field class="dfEditor.SpriteImageController$5" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$14" map="14"/>
  <field class="dfEditor.SpriteImageController$14" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$14" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$13" map="13"/>
  <field class="dfEditor.SpriteImageController$13" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$13" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$4" map="4"/>
  <field class="dfEditor.SpriteImageController$4" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$12" map="12"/>
  <field class="dfEditor.SpriteImageController$12" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$12" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$3" map="3"/>
  <field class="dfEditor.SpriteImageController$3" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$11" map="11"/>
  <field class="dfEditor.SpriteImageController$11" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$11" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$2" map="2"/>
  <field class="dfEditor.SpriteImageController$2" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$10" map="10"/>
  <field class="dfEditor.SpriteImageController$10" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$10" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpriteImageController$1" map="1"/>
  <field class="dfEditor.SpriteImageController$1" name="this$0" map="A"/>
  <method class="dfEditor.SpriteImageController$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="dfEditor.SpriteImageController" name="minSpacingField" map="&#x00de;"/>
  <field class="dfEditor.SpriteImageController" name="_lastSelectedDirNode" map="&#x00df;"/>
  <field class="dfEditor.SpriteImageController" name="jSplitPane1" map="&#x00e0;"/>
  <field class="dfEditor.SpriteImageController" name="jPanel1" map="&#x00e1;"/>
  <field class="dfEditor.SpriteImageController" name="addSpriteItem" map="&#x00e2;"/>
  <field class="dfEditor.SpriteImageController" name="jScrollPane1" map="&#x00e3;"/>
  <field class="dfEditor.SpriteImageController" name="newMenu" map="&#x00e4;"/>
  <field class="dfEditor.SpriteImageController" name="dirPopupMenu" map="&#x00e5;"/>
  <field class="dfEditor.SpriteImageController" name="removeSpriteItem" map="&#x00e6;"/>
  <field class="dfEditor.SpriteImageController" name="viewPanel" map="&#x00e7;"/>
  <field class="dfEditor.SpriteImageController" name="removeDirItem" map="&#x00e8;"/>
  <field class="dfEditor.SpriteImageController" name="spriteImageController" map="&#x00e9;"/>
  <field class="dfEditor.SpriteImageController" name="removeSpriteButton" map="&#x00ea;"/>
  <field class="dfEditor.SpriteImageController" name="textureWidthField" map="&#x00eb;"/>
  <field class="dfEditor.SpriteImageController" name="addDirItem" map="&#x00ec;"/>
  <field class="dfEditor.SpriteImageController" name="trimButton" map="&#x00ed;"/>
  <field class="dfEditor.SpriteImageController" name="spritePopupMenu" map="&#x00ee;"/>
  <field class="dfEditor.SpriteImageController" name="nameTree" map="&#x00ef;"/>
  <field class="dfEditor.SpriteImageController" name="textureHeightField" map="&#x00f0;"/>
  <field class="dfEditor.SpriteImageController" name="zoomInButton" map="&#x00f1;"/>
  <field class="dfEditor.SpriteImageController" name="untrimButton" map="&#x00f2;"/>
  <field class="dfEditor.SpriteImageController" name="savedImageFile" map="&#x00f3;"/>
  <field class="dfEditor.SpriteImageController" name="jLabel3" map="&#x00f4;"/>
  <field class="dfEditor.SpriteImageController" name="jLabel2" map="&#x00f5;"/>
  <field class="dfEditor.SpriteImageController" name="jLabel1" map="&#x00f6;"/>
  <field class="dfEditor.SpriteImageController" name="addFolderButton" map="&#x00f8;"/>
  <field class="dfEditor.SpriteImageController" name="addSpriteButton" map="&#x00f9;"/>
  <field class="dfEditor.SpriteImageController" name="savedImageFormat" map="&#x00fa;"/>
  <field class="dfEditor.SpriteImageController" name="zoomOutButton" map="&#x00fb;"/>
  <field class="dfEditor.SpriteImageController" name="packButton" map="&#x00fc;"/>
  <method class="dfEditor.SpriteImageController" name="void zoomInButtonActionPerformed(java.awt.event.ActionEvent)" map="b"/>
  <method class="dfEditor.SpriteImageController" name="void access$400(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.SpriteImageController" name="void removeDirItemActionPerformed(java.awt.event.ActionEvent)" map="c"/>
  <method class="dfEditor.SpriteImageController" name="void access$1500(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.SpriteImageController" name="void packButtonActionPerformed(java.awt.event.ActionEvent)" map="d"/>
  <method class="dfEditor.SpriteImageController" name="void addSpriteItemActionPerformed(java.awt.event.ActionEvent)" map="e"/>
  <method class="dfEditor.SpriteImageController" name="void addSpriteButtonActionPerformed(java.awt.event.ActionEvent)" map="f"/>
  <method class="dfEditor.SpriteImageController" name="void access$500(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="C"/>
  <method class="dfEditor.SpriteImageController" name="void trimButtonActionPerformed(java.awt.event.ActionEvent)" map="g"/>
  <method class="dfEditor.SpriteImageController" name="void nameTreePopup(java.awt.Point)" map="B"/>
  <method class="dfEditor.SpriteImageController" name="void access$1600(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="D"/>
  <method class="dfEditor.SpriteImageController" name="void pack()" map="Z"/>
  <method class="dfEditor.SpriteImageController" name="void untrimButtonActionPerformed(java.awt.event.ActionEvent)" map="h"/>
  <method class="dfEditor.SpriteImageController" name="void removeSpriteButtonActionPerformed(java.awt.event.ActionEvent)" map="i"/>
  <method class="dfEditor.SpriteImageController" name="void graphicAdded(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="B"/>
  <method class="dfEditor.SpriteImageController" name="void removeSelectedSprites()" map="_"/>
  <method class="dfEditor.SpriteImageController" name="void initComponents()" map="a"/>
  <method class="dfEditor.SpriteImageController" name="boolean load(java.lang.String, javax.swing.tree.DefaultTreeModel)" map="B"/>
  <method class="dfEditor.SpriteImageController" name="void access$1000(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="E"/>
  <method class="dfEditor.SpriteImageController" name="boolean saveImage(java.io.File, java.lang.String)" map="B"/>
  <method class="dfEditor.SpriteImageController" name="void nameTreeMousePressed(java.awt.event.MouseEvent)" map="C"/>
  <method class="dfEditor.SpriteImageController" name="boolean saveAs()" map="D"/>
  <method class="dfEditor.SpriteImageController" name="void addDirToSelectedNode()" map="b"/>
  <method class="dfEditor.SpriteImageController" name="void graphicsErased(dfEditor.GraphicPanel, java.util.ArrayList)" map="A"/>
  <method class="dfEditor.SpriteImageController" name="void access$000(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="F"/>
  <method class="dfEditor.SpriteImageController" name="void addNodeToPanel(dfEditor.CustomNode, java.awt.image.BufferedImage)" map="A"/>
  <method class="dfEditor.SpriteImageController" name="boolean save()" map="G"/>
  <method class="dfEditor.SpriteImageController" name="void access$1100(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="G"/>
  <method class="dfEditor.SpriteImageController" name="boolean saveImageAs()" map="c"/>
  <method class="dfEditor.SpriteImageController" name="void addDirItemActionPerformed(java.awt.event.ActionEvent)" map="j"/>
  <method class="dfEditor.SpriteImageController" name="void zoomOutButtonActionPerformed(java.awt.event.ActionEvent)" map="k"/>
  <method class="dfEditor.SpriteImageController" name="void access$700(dfEditor.SpriteImageController, java.awt.event.MouseEvent)" map="A"/>
  <method class="dfEditor.SpriteImageController" name="void access$100(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="H"/>
  <method class="dfEditor.SpriteImageController" name="void textureWidthFieldActionPerformed(java.awt.event.ActionEvent)" map="l"/>
  <method class="dfEditor.SpriteImageController" name="void addFolderButtonActionPerformed(java.awt.event.ActionEvent)" map="m"/>
  <method class="dfEditor.SpriteImageController" name="java.io.File[] showSetImageChooser()" map="d"/>
  <method class="dfEditor.SpriteImageController" name="void access$1200(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="I"/>
  <method class="dfEditor.SpriteImageController" name="void access$900(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="J"/>
  <method class="dfEditor.SpriteImageController" name="void textureHeightFieldActionPerformed(java.awt.event.ActionEvent)" map="n"/>
  <method class="dfEditor.SpriteImageController" name="void addNodeToRectList(dfEditor.CustomNode, java.util.ArrayList)" map="B"/>
  <method class="dfEditor.SpriteImageController" name="void graphicMoved(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="C"/>
  <method class="dfEditor.SpriteImageController" name="void access$800(dfEditor.SpriteImageController, javax.swing.event.TreeSelectionEvent)" map="A"/>
  <method class="dfEditor.SpriteImageController" name="void access$200(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="K"/>
  <method class="dfEditor.SpriteImageController" name="boolean saveCoordsAs()" map="e"/>
  <method class="dfEditor.SpriteImageController" name="void access$1300(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="L"/>
  <method class="dfEditor.SpriteImageController" name="void nameTreeMouseReleased(java.awt.event.MouseEvent)" map="D"/>
  <method class="dfEditor.SpriteImageController" name="void removeSpriteItemActionPerformed(java.awt.event.ActionEvent)" map="o"/>
  <method class="dfEditor.SpriteImageController" name="void access$300(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="M"/>
  <method class="dfEditor.SpriteImageController" name="void access$600(dfEditor.SpriteImageController, java.awt.event.MouseEvent)" map="B"/>
  <method class="dfEditor.SpriteImageController" name="void graphicErased(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="A"/>
  <method class="dfEditor.SpriteImageController" name="void access$1400(dfEditor.SpriteImageController, java.awt.event.ActionEvent)" map="N"/>
  <method class="dfEditor.SpriteImageController" name="void nameTreeValueChanged(javax.swing.event.TreeSelectionEvent)" map="C"/>
  <method class="dfEditor.SpriteImageController" name="void graphicSelectionChanged(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="D"/>
  <method class="dfEditor.SpriteImageController" name="boolean saveCoords(java.io.File)" map="F"/>
  <class name="dfEditor.GraphicPanelChangeListener" map="D"/>
  <method class="dfEditor.GraphicPanelChangeListener" name="void graphicErased(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="A"/>
  <method class="dfEditor.GraphicPanelChangeListener" name="void graphicAdded(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="B"/>
  <method class="dfEditor.GraphicPanelChangeListener" name="void graphicMoved(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="C"/>
  <method class="dfEditor.GraphicPanelChangeListener" name="void graphicsErased(dfEditor.GraphicPanel, java.util.ArrayList)" map="A"/>
  <method class="dfEditor.GraphicPanelChangeListener" name="void graphicSelectionChanged(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="D"/>
  <class name="dfEditor.GraphicObject$Anchor" map="_A"/>
  <field class="dfEditor.GraphicObject$Anchor" name="TOP_LEFT" map="A"/>
  <field class="dfEditor.GraphicObject$Anchor" name="CENTRE" map="B"/>
  <field class="dfEditor.GraphicObject$Anchor" name="$VALUES" map="C"/>
  <method class="dfEditor.GraphicObject$Anchor" name="dfEditor.GraphicObject$Anchor[] values()" map="values"/>
  <method class="dfEditor.GraphicObject$Anchor" name="dfEditor.GraphicObject$Anchor valueOf(java.lang.String)" map="valueOf"/>
  <class name="dfEditor.GraphicObject" map="E"/>
  <field class="dfEditor.GraphicObject" name="_rect" map="A"/>
  <field class="dfEditor.GraphicObject" name="_angle" map="B"/>
  <field class="dfEditor.GraphicObject" name="_bounds" map="C"/>
  <field class="dfEditor.GraphicObject" name="_bSelected" map="D"/>
  <field class="dfEditor.GraphicObject" name="_savedRect" map="E"/>
  <field class="dfEditor.GraphicObject" name="_savedAngle" map="F"/>
  <field class="dfEditor.GraphicObject" name="_bResizable" map="G"/>
  <field class="dfEditor.GraphicObject" name="_description" map="H"/>
  <field class="dfEditor.GraphicObject" name="_anchor" map="I"/>
  <method class="dfEditor.GraphicObject" name="void moveFromSavedPoint(java.awt.Point)" map="A"/>
  <method class="dfEditor.GraphicObject" name="void saveRect()" map="A"/>
  <method class="dfEditor.GraphicObject" name="void setAnchor(dfEditor.GraphicObject$Anchor)" map="A"/>
  <method class="dfEditor.GraphicObject" name="void draw(java.awt.Graphics, java.awt.Point, float, float, boolean)" map="A"/>
  <method class="dfEditor.GraphicObject" name="boolean hasMoved()" map="B"/>
  <method class="dfEditor.GraphicObject" name="dfEditor.GraphicObject$Anchor getAnchor()" map="C"/>
  <method class="dfEditor.GraphicObject" name="void saveAngle()" map="D"/>
  <method class="dfEditor.GraphicObject" name="float getSavedAngle()" map="E"/>
  <method class="dfEditor.GraphicObject" name="boolean isResizable()" map="F"/>
  <method class="dfEditor.GraphicObject" name="java.lang.String toString()" map="toString"/>
  <method class="dfEditor.GraphicObject" name="void draw(java.awt.Graphics, java.awt.Point, float, boolean)" map="A"/>
  <method class="dfEditor.GraphicObject" name="void changed()" map="G"/>
  <method class="dfEditor.GraphicObject" name="void setSelected(boolean)" map="A"/>
  <method class="dfEditor.GraphicObject" name="java.awt.Rectangle getRect()" map="H"/>
  <method class="dfEditor.GraphicObject" name="void resizeFromSavedPoint(java.awt.Point, int)" map="A"/>
  <method class="dfEditor.GraphicObject" name="void setAngle(float)" map="A"/>
  <method class="dfEditor.GraphicObject" name="void setRect(java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.GraphicObject" name="void setDescription(java.lang.String)" map="A"/>
  <method class="dfEditor.GraphicObject" name="void constrainToBounds(java.awt.Rectangle)" map="B"/>
  <method class="dfEditor.GraphicObject" name="float getAngle()" map="I"/>
  <method class="dfEditor.GraphicObject" name="void setBounds(java.awt.Rectangle)" map="C"/>
  <method class="dfEditor.GraphicObject" name="java.awt.Rectangle getSavedRect()" map="J"/>
  <method class="dfEditor.GraphicObject" name="void setResizable(boolean)" map="B"/>
  <method class="dfEditor.GraphicObject" name="boolean isSelected()" map="K"/>
  <class name="dfEditor.PixelPacker$Node" map="_A"/>
  <field class="dfEditor.PixelPacker$Node" name="this$0" map="A"/>
  <field class="dfEditor.PixelPacker$Node" name="bTaken" map="B"/>
  <field class="dfEditor.PixelPacker$Node" name="children" map="C"/>
  <field class="dfEditor.PixelPacker$Node" name="rect" map="D"/>
  <method class="dfEditor.PixelPacker$Node" name="dfEditor.PixelPacker$Node access$000(dfEditor.PixelPacker$Node, java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.PixelPacker$Node" name="dfEditor.PixelPacker$Node Insert(java.awt.Rectangle)" map="A"/>
  <class name="dfEditor.PixelPacker$PixelRectPair" map="_B"/>
  <field class="dfEditor.PixelPacker$PixelRectPair" name="this$0" map="A"/>
  <field class="dfEditor.PixelPacker$PixelRectPair" name="rect" map="B"/>
  <field class="dfEditor.PixelPacker$PixelRectPair" name="pixels" map="C"/>
  <class name="dfEditor.PixelPacker" map="F"/>
  <method class="dfEditor.PixelPacker" name="boolean packRects(java.awt.Rectangle, java.awt.Rectangle[], int)" map="A"/>
  <method class="dfEditor.PixelPacker" name="java.awt.Rectangle applySpacing(java.awt.Rectangle, int)" map="A"/>
  <method class="dfEditor.PixelPacker" name="void copyRect(java.awt.Rectangle, java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.PixelPacker" name="java.awt.image.BufferedImage packPixels(java.awt.image.BufferedImage, java.awt.Rectangle[], boolean)" map="A"/>
  <class name="dfEditor.SpriteInfoPanel" map="G"/>
  <field class="dfEditor.SpriteInfoPanel" name="spriteName" map="A"/>
  <field class="dfEditor.SpriteInfoPanel" name="spriteDimensions" map="B"/>
  <field class="dfEditor.SpriteInfoPanel" name="spritePanel" map="C"/>
  <method class="dfEditor.SpriteInfoPanel" name="void setTitle(java.lang.String)" map="A"/>
  <method class="dfEditor.SpriteInfoPanel" name="void initComponents()" map="A"/>
  <method class="dfEditor.SpriteInfoPanel" name="void setSprite(java.lang.String, java.awt.Rectangle, dfEditor.GraphicObject)" map="A"/>
  <method class="dfEditor.SpriteInfoPanel" name="void setCoords(java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.SpriteInfoPanel" name="void setGraphic(dfEditor.GraphicObject)" map="A"/>
  <class name="dfEditor.dfEditorApp$1" map="1"/>
  <field class="dfEditor.dfEditorApp$1" name="this$0" map="A"/>
  <field class="dfEditor.dfEditorApp$1" name="val$self" map="B"/>
  <method class="dfEditor.dfEditorApp$1" name="void run()" map="run"/>
  <field class="dfEditor.dfEditorApp" name="isFreeVersion" map="A"/>
  <field class="dfEditor.dfEditorApp" name="sv" map="B"/>
  <field class="dfEditor.dfEditorApp" name="daysUsed" map="C"/>
  <field class="dfEditor.dfEditorApp" name="regKey" map="D"/>
  <method class="dfEditor.dfEditorApp" name="long access$002(long)" map="A"/>
  <method class="dfEditor.dfEditorApp" name="boolean setRegKey(java.lang.String)" map="A"/>
  <method class="dfEditor.dfEditorApp" name="long getDaysUsed()" map="A"/>
  <method class="dfEditor.dfEditorApp" name="void shutdown()" map="shutdown"/>
  <method class="dfEditor.dfEditorApp" name="int getDaysRemaining()" map="B"/>
  <method class="dfEditor.dfEditorApp" name="boolean isRegistered()" map="C"/>
  <method class="dfEditor.dfEditorApp" name="void configureWindow(java.awt.Window)" map="configureWindow"/>
  <method class="dfEditor.dfEditorApp" name="dfEditor.dfEditorView access$102(dfEditor.dfEditorApp, dfEditor.dfEditorView)" map="A"/>
  <method class="dfEditor.dfEditorApp" name="java.lang.String getRegKey()" map="D"/>
  <method class="dfEditor.dfEditorApp" name="dfEditor.dfEditorApp getApplication()" map="E"/>
  <method class="dfEditor.dfEditorApp" name="void startup()" map="startup"/>
  <method class="dfEditor.dfEditorApp" name="dfEditor.dfEditorView access$100(dfEditor.dfEditorApp)" map="A"/>
  <class name="dfEditor.dfEditorAboutBoxFree$1" map="1"/>
  <field class="dfEditor.dfEditorAboutBoxFree$1" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorAboutBoxFree$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="dfEditor.dfEditorAboutBoxFree" name="jTextArea1" map="A"/>
  <field class="dfEditor.dfEditorAboutBoxFree" name="jScrollPane1" map="B"/>
  <field class="dfEditor.dfEditorAboutBoxFree" name="parent" map="C"/>
  <field class="dfEditor.dfEditorAboutBoxFree" name="CloseButton" map="D"/>
  <field class="dfEditor.dfEditorAboutBoxFree" name="countDownTimer" map="E"/>
  <method class="dfEditor.dfEditorAboutBoxFree" name="void checkRegKey()" map="A"/>
  <method class="dfEditor.dfEditorAboutBoxFree" name="void CloseButtonActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.dfEditorAboutBoxFree" name="void initComponents()" map="B"/>
  <method class="dfEditor.dfEditorAboutBoxFree" name="void closeAboutBox()" map="C"/>
  <method class="dfEditor.dfEditorAboutBoxFree" name="void access$000(dfEditor.dfEditorAboutBoxFree, java.awt.event.ActionEvent)" map="A"/>
  <class name="dfEditor.dfEditorView$9" map="9"/>
  <field class="dfEditor.dfEditorView$9" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorView$9" name="void stateChanged(javax.swing.event.ChangeEvent)" map="stateChanged"/>
  <class name="dfEditor.dfEditorView$8" map="8"/>
  <field class="dfEditor.dfEditorView$8" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorView$8" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.dfEditorView$7" map="7"/>
  <field class="dfEditor.dfEditorView$7" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorView$7" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.dfEditorView$6" map="6"/>
  <field class="dfEditor.dfEditorView$6" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorView$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.dfEditorView$5" map="5"/>
  <field class="dfEditor.dfEditorView$5" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorView$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.dfEditorView$4" map="4"/>
  <field class="dfEditor.dfEditorView$4" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorView$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.dfEditorView$3" map="3"/>
  <field class="dfEditor.dfEditorView$3" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorView$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.dfEditorView$2" map="2"/>
  <field class="dfEditor.dfEditorView$2" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorView$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.dfEditorView$1" map="1"/>
  <field class="dfEditor.dfEditorView$1" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorView$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="dfEditor.dfEditorView" name="tabbedPane" map="A"/>
  <field class="dfEditor.dfEditorView" name="mainPanel" map="B"/>
  <field class="dfEditor.dfEditorView" name="statusPanel" map="C"/>
  <field class="dfEditor.dfEditorView" name="menuItemSave" map="D"/>
  <field class="dfEditor.dfEditorView" name="helpLabel" map="E"/>
  <field class="dfEditor.dfEditorView" name="redoMenuItem" map="F"/>
  <field class="dfEditor.dfEditorView" name="jMenu2" map="G"/>
  <field class="dfEditor.dfEditorView" name="loadMenuItem" map="H"/>
  <field class="dfEditor.dfEditorView" name="fileChooser" map="I"/>
  <field class="dfEditor.dfEditorView" name="editMenu" map="J"/>
  <field class="dfEditor.dfEditorView" name="menuBar" map="K"/>
  <field class="dfEditor.dfEditorView" name="newSpritesheetItem" map="L"/>
  <field class="dfEditor.dfEditorView" name="aboutBox" map="M"/>
  <field class="dfEditor.dfEditorView" name="undoMenuItem" map="N"/>
  <field class="dfEditor.dfEditorView" name="aboutMenuItem" map="O"/>
  <field class="dfEditor.dfEditorView" name="newAnimationItem" map="P"/>
  <field class="dfEditor.dfEditorView" name="menuItemSaveAs" map="Q"/>
  <method class="dfEditor.dfEditorView" name="void access$500(dfEditor.dfEditorView, java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.dfEditorView" name="void willExit(java.util.EventObject)" map="willExit"/>
  <method class="dfEditor.dfEditorView" name="void access$000(dfEditor.dfEditorView, java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.dfEditorView" name="void updateMenuBar()" map="A"/>
  <method class="dfEditor.dfEditorView" name="void load()" map="B"/>
  <method class="dfEditor.dfEditorView" name="void initComponents()" map="C"/>
  <method class="dfEditor.dfEditorView" name="void checkRegistered()" map="D"/>
  <method class="dfEditor.dfEditorView" name="void newAnimationItemActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.dfEditorView" name="void showAboutBox()" map="E"/>
  <method class="dfEditor.dfEditorView" name="void aboutMenuItemActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.dfEditorView" name="void access$400(dfEditor.dfEditorView, java.awt.event.ActionEvent)" map="C"/>
  <method class="dfEditor.dfEditorView" name="boolean canExit(java.util.EventObject)" map="canExit"/>
  <method class="dfEditor.dfEditorView" name="void tabbedPaneStateChanged(javax.swing.event.ChangeEvent)" map="A"/>
  <method class="dfEditor.dfEditorView" name="void taskChanged(dfEditor.dfEditorTask)" map="A"/>
  <method class="dfEditor.dfEditorView" name="void newSpritesheetItemActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <method class="dfEditor.dfEditorView" name="void access$800(dfEditor.dfEditorView, javax.swing.event.ChangeEvent)" map="A"/>
  <method class="dfEditor.dfEditorView" name="void access$200(dfEditor.dfEditorView, java.awt.event.ActionEvent)" map="D"/>
  <method class="dfEditor.dfEditorView" name="void menuItemSaveActionPerformed(java.awt.event.ActionEvent)" map="D"/>
  <method class="dfEditor.dfEditorView" name="void addTab(java.awt.Component)" map="A"/>
  <method class="dfEditor.dfEditorView" name="void access$300(dfEditor.dfEditorView, java.awt.event.ActionEvent)" map="E"/>
  <method class="dfEditor.dfEditorView" name="void redoMenuItemActionPerformed(java.awt.event.ActionEvent)" map="E"/>
  <method class="dfEditor.dfEditorView" name="void undoMenuItemActionPerformed(java.awt.event.ActionEvent)" map="F"/>
  <method class="dfEditor.dfEditorView" name="void access$600(dfEditor.dfEditorView, java.awt.event.ActionEvent)" map="F"/>
  <method class="dfEditor.dfEditorView" name="void access$100(dfEditor.dfEditorView, java.awt.event.ActionEvent)" map="G"/>
  <method class="dfEditor.dfEditorView" name="void menuItemSaveAsActionPerformed(java.awt.event.ActionEvent)" map="G"/>
  <method class="dfEditor.dfEditorView" name="void access$700(dfEditor.dfEditorView, java.awt.event.ActionEvent)" map="H"/>
  <method class="dfEditor.dfEditorView" name="void loadMenuItemActionPerformed(java.awt.event.ActionEvent)" map="H"/>
  <class name="dfEditor.SpriteTree$2" map="2"/>
  <field class="dfEditor.SpriteTree$2" name="this$0" map="A"/>
  <method class="dfEditor.SpriteTree$2" name="java.awt.Component getTreeCellRendererComponent(javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean)" map="getTreeCellRendererComponent"/>
  <class name="dfEditor.SpriteTree$1" map="1"/>
  <field class="dfEditor.SpriteTree$1" name="this$0" map="A"/>
  <field class="dfEditor.SpriteTree$1" name="val$self" map="B"/>
  <method class="dfEditor.SpriteTree$1" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <class name="dfEditor.SpriteTree" map="H"/>
  <field class="dfEditor.SpriteTree" name="dragSource" map="A"/>
  <field class="dfEditor.SpriteTree" name="treeListeners" map="B"/>
  <method class="dfEditor.SpriteTree" name="javax.swing.tree.DefaultMutableTreeNode getSelectedNode()" map="A"/>
  <method class="dfEditor.SpriteTree" name="dfEditor.CustomNode nodeForObject(java.lang.Object)" map="A"/>
  <method class="dfEditor.SpriteTree" name="void addTreeListener(dfEditor.SpriteTreeListener)" map="A"/>
  <method class="dfEditor.SpriteTree" name="void removeListener(dfEditor.SpriteTreeListener)" map="B"/>
  <method class="dfEditor.SpriteTree" name="void doubleClick(int, javax.swing.tree.TreePath)" map="A"/>
  <method class="dfEditor.SpriteTree" name="dfEditor.CustomNode findSubNodeWithPath(dfEditor.CustomNode, java.lang.String)" map="A"/>
  <method class="dfEditor.SpriteTree" name="void access$000(dfEditor.SpriteTree, int, javax.swing.tree.TreePath)" map="A"/>
  <method class="dfEditor.SpriteTree" name="void initComponents()" map="B"/>
  <method class="dfEditor.SpriteTree" name="void dragDropEnd(java.awt.dnd.DragSourceDropEvent)" map="dragDropEnd"/>
  <method class="dfEditor.SpriteTree" name="dfEditor.CustomNode getNodeForPath(java.lang.String)" map="A"/>
  <method class="dfEditor.SpriteTree" name="javax.swing.tree.DefaultMutableTreeNode getSelectedNodeDir()" map="C"/>
  <method class="dfEditor.SpriteTree" name="dfEditor.CustomNode[] getSelectedNodes()" map="D"/>
  <method class="dfEditor.SpriteTree" name="void dragExit(java.awt.dnd.DragSourceEvent)" map="dragExit"/>
  <method class="dfEditor.SpriteTree" name="dfEditor.CustomNode findFirstNodeContainingCustomObject(dfEditor.CustomNode, java.lang.Object)" map="A"/>
  <method class="dfEditor.SpriteTree" name="void dragGestureRecognized(java.awt.dnd.DragGestureEvent)" map="dragGestureRecognized"/>
  <method class="dfEditor.SpriteTree" name="void dragOver(java.awt.dnd.DragSourceDragEvent)" map="dragOver"/>
  <method class="dfEditor.SpriteTree" name="void dropActionChanged(java.awt.dnd.DragSourceDragEvent)" map="dropActionChanged"/>
  <method class="dfEditor.SpriteTree" name="void setColours(dfEditor.CustomNode)" map="A"/>
  <method class="dfEditor.SpriteTree" name="void fireValueChanged(javax.swing.event.TreeSelectionEvent)" map="fireValueChanged"/>
  <method class="dfEditor.SpriteTree" name="void clear()" map="E"/>
  <method class="dfEditor.SpriteTree" name="void update(java.util.Observable, java.lang.Object)" map="update"/>
  <method class="dfEditor.SpriteTree" name="void dragEnter(java.awt.dnd.DragSourceDragEvent)" map="dragEnter"/>
  <method class="dfEditor.SpriteTree" name="void setupCellRenderer()" map="F"/>
  <class name="dfEditor.GridGraphicPanel" map="I"/>
  <field class="dfEditor.GridGraphicPanel" name="tileSize" map="W"/>
  <field class="dfEditor.GridGraphicPanel" name="padding" map="X"/>
  <method class="dfEditor.GridGraphicPanel" name="void setTileSize(java.awt.Dimension)" map="A"/>
  <method class="dfEditor.GridGraphicPanel" name="void relayout()" map="K"/>
  <method class="dfEditor.GridGraphicPanel" name="void dropGraphic(dfEditor.GraphicObject, boolean)" map="A"/>
  <method class="dfEditor.GridGraphicPanel" name="void drawGridLines(java.awt.Graphics, java.awt.Color)" map="A"/>
  <method class="dfEditor.GridGraphicPanel" name="void setPadding(java.awt.Dimension)" map="B"/>
  <method class="dfEditor.GridGraphicPanel" name="void draw(java.awt.Graphics)" map="B"/>
  <class name="dfEditor.CommandManagerListener" map="J"/>
  <method class="dfEditor.CommandManagerListener" name="void commandStackChanged(dfEditor.command.CommandManager)" map="A"/>
  <class name="dfEditor.TabComponent$1" map="1"/>
  <field class="dfEditor.TabComponent$1" name="this$0" map="A"/>
  <method class="dfEditor.TabComponent$1" name="java.lang.String getText()" map="getText"/>
  <class name="dfEditor.TabComponent$CloseButton" map="_A"/>
  <field class="dfEditor.TabComponent$CloseButton" name="this$0" map="A"/>
  <method class="dfEditor.TabComponent$CloseButton" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="dfEditor.TabComponent$CloseButton" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.TabComponent" map="K"/>
  <field class="dfEditor.TabComponent" name="tabbedPane" map="A"/>
  <method class="dfEditor.TabComponent" name="javax.swing.JTabbedPane access$000(dfEditor.TabComponent)" map="A"/>
  <class name="dfEditor.ImageModifiedListener" map="L"/>
  <method class="dfEditor.ImageModifiedListener" name="void imageModified()" map="O"/>
  <class name="dfEditor.Compass" map="M"/>
  <field class="dfEditor.Compass" name="NORTH" map="A"/>
  <field class="dfEditor.Compass" name="SOUTH_WEST" map="B"/>
  <field class="dfEditor.Compass" name="SOUTH" map="C"/>
  <field class="dfEditor.Compass" name="NORTH_EAST" map="D"/>
  <field class="dfEditor.Compass" name="EAST" map="E"/>
  <field class="dfEditor.Compass" name="NORTH_WEST" map="F"/>
  <field class="dfEditor.Compass" name="NONE" map="G"/>
  <field class="dfEditor.Compass" name="WEST" map="H"/>
  <field class="dfEditor.Compass" name="SOUTH_EAST" map="I"/>
  <class name="dfEditor.dfEditorTask" map="N"/>
  <method class="dfEditor.dfEditorTask" name="void setSavedFile(java.io.File)" map="A"/>
  <method class="dfEditor.dfEditorTask" name="java.io.File getSavedFile()" map="A"/>
  <method class="dfEditor.dfEditorTask" name="void undo()" map="B"/>
  <method class="dfEditor.dfEditorTask" name="void refreshCommandManagerButtons()" map="C"/>
  <method class="dfEditor.dfEditorTask" name="boolean saveAs()" map="D"/>
  <method class="dfEditor.dfEditorTask" name="java.lang.String getName()" map="getName"/>
  <method class="dfEditor.dfEditorTask" name="void redo()" map="E"/>
  <method class="dfEditor.dfEditorTask" name="boolean hasBeenModified()" map="F"/>
  <method class="dfEditor.dfEditorTask" name="boolean save()" map="G"/>
  <class name="dfEditor.SpriteList" map="O"/>
  <field class="dfEditor.SpriteList" name="dragOrigin" map="A"/>
  <field class="dfEditor.SpriteList" name="nodeDroppedListeners" map="B"/>
  <method class="dfEditor.SpriteList" name="void dragEnter(java.awt.dnd.DropTargetDragEvent)" map="dragEnter"/>
  <method class="dfEditor.SpriteList" name="void dragDropEnd(java.awt.dnd.DragSourceDropEvent)" map="A"/>
  <method class="dfEditor.SpriteList" name="void dragGestureRecognized(java.awt.dnd.DragGestureEvent)" map="A"/>
  <method class="dfEditor.SpriteList" name="void dropActionChanged(java.awt.dnd.DropTargetDragEvent)" map="dropActionChanged"/>
  <method class="dfEditor.SpriteList" name="void dragExit(java.awt.dnd.DropTargetEvent)" map="dragExit"/>
  <method class="dfEditor.SpriteList" name="void dragOver(java.awt.dnd.DropTargetDragEvent)" map="dragOver"/>
  <method class="dfEditor.SpriteList" name="void setDragSource(java.awt.Component)" map="A"/>
  <method class="dfEditor.SpriteList" name="void addNodeDroppedListener(dfEditor.NodeDroppedListener)" map="A"/>
  <method class="dfEditor.SpriteList" name="void drop(java.awt.dnd.DropTargetDropEvent)" map="drop"/>
  <class name="dfEditor.SpritesheetController$9" map="9"/>
  <field class="dfEditor.SpritesheetController$9" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$9" name="void mouseReleased(java.awt.event.MouseEvent)" map="mouseReleased"/>
  <method class="dfEditor.SpritesheetController$9" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <class name="dfEditor.SpritesheetController$8" map="8"/>
  <field class="dfEditor.SpritesheetController$8" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$8" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$7" map="7"/>
  <field class="dfEditor.SpritesheetController$7" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$7" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$6" map="6"/>
  <field class="dfEditor.SpritesheetController$6" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$5" map="5"/>
  <field class="dfEditor.SpritesheetController$5" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$14" map="14"/>
  <field class="dfEditor.SpritesheetController$14" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$14" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$4" map="4"/>
  <field class="dfEditor.SpritesheetController$4" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$13" map="13"/>
  <field class="dfEditor.SpritesheetController$13" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$13" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$3" map="3"/>
  <field class="dfEditor.SpritesheetController$3" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$12" map="12"/>
  <field class="dfEditor.SpritesheetController$12" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$12" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$2" map="2"/>
  <field class="dfEditor.SpritesheetController$2" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$11" map="11"/>
  <field class="dfEditor.SpritesheetController$11" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$11" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SpritesheetController$10" map="10"/>
  <field class="dfEditor.SpritesheetController$10" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$10" name="void valueChanged(javax.swing.event.TreeSelectionEvent)" map="valueChanged"/>
  <class name="dfEditor.SpritesheetController$1" map="1"/>
  <field class="dfEditor.SpritesheetController$1" name="this$0" map="A"/>
  <method class="dfEditor.SpritesheetController$1" name="void run()" map="run"/>
  <field class="dfEditor.SpritesheetController" name="_lastSelectedDirNode" map="&#x00c0;"/>
  <field class="dfEditor.SpritesheetController" name="jSplitPane2" map="&#x00c1;"/>
  <field class="dfEditor.SpritesheetController" name="jSplitPane1" map="&#x00c2;"/>
  <field class="dfEditor.SpritesheetController" name="bImageModified" map="&#x00c3;"/>
  <field class="dfEditor.SpritesheetController" name="jPanel2" map="&#x00c4;"/>
  <field class="dfEditor.SpritesheetController" name="jPanel1" map="&#x00c5;"/>
  <field class="dfEditor.SpritesheetController" name="addSpriteItem" map="&#x00c6;"/>
  <field class="dfEditor.SpritesheetController" name="imageButton" map="&#x00c7;"/>
  <field class="dfEditor.SpritesheetController" name="packItem" map="&#x00c8;"/>
  <field class="dfEditor.SpritesheetController" name="jScrollPane1" map="&#x00c9;"/>
  <field class="dfEditor.SpritesheetController" name="setImageItem" map="&#x00ca;"/>
  <field class="dfEditor.SpritesheetController" name="newMenu" map="&#x00cb;"/>
  <field class="dfEditor.SpritesheetController" name="dirPopupMenu" map="&#x00cc;"/>
  <field class="dfEditor.SpritesheetController" name="removeSpriteItem" map="&#x00cd;"/>
  <field class="dfEditor.SpritesheetController" name="viewPanel" map="&#x00ce;"/>
  <field class="dfEditor.SpritesheetController" name="spriteInfoPanel" map="&#x00cf;"/>
  <field class="dfEditor.SpritesheetController" name="removeDirItem" map="&#x00d0;"/>
  <field class="dfEditor.SpritesheetController" name="removeSpriteButton" map="&#x00d1;"/>
  <field class="dfEditor.SpritesheetController" name="changeColourItem" map="&#x00d2;"/>
  <field class="dfEditor.SpritesheetController" name="addDirItem" map="&#x00d3;"/>
  <field class="dfEditor.SpritesheetController" name="spritePopupMenu" map="&#x00d4;"/>
  <field class="dfEditor.SpritesheetController" name="nameTree" map="&#x00d5;"/>
  <field class="dfEditor.SpritesheetController" name="imagePopup" map="&#x00d6;"/>
  <field class="dfEditor.SpritesheetController" name="zoomInButton" map="&#x00d8;"/>
  <field class="dfEditor.SpritesheetController" name="savedImageFile" map="&#x00d9;"/>
  <field class="dfEditor.SpritesheetController" name="addFolderButton" map="&#x00da;"/>
  <field class="dfEditor.SpritesheetController" name="addSpriteButton" map="&#x00db;"/>
  <field class="dfEditor.SpritesheetController" name="savedImageFormat" map="&#x00dc;"/>
  <field class="dfEditor.SpritesheetController" name="zoomOutButton" map="&#x00dd;"/>
  <method class="dfEditor.SpritesheetController" name="void access$200(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="void access$800(dfEditor.SpritesheetController, java.awt.event.MouseEvent)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="void addNodeToPanel(dfEditor.CustomNode)" map="B"/>
  <method class="dfEditor.SpritesheetController" name="void zoomInButtonActionPerformed(java.awt.event.ActionEvent)" map="R"/>
  <method class="dfEditor.SpritesheetController" name="void setImage(java.io.File)" map="D"/>
  <method class="dfEditor.SpritesheetController" name="void access$1300(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.SpritesheetController" name="void removeDirItemActionPerformed(java.awt.event.ActionEvent)" map="S"/>
  <method class="dfEditor.SpritesheetController" name="void addSpriteItemActionPerformed(java.awt.event.ActionEvent)" map="T"/>
  <method class="dfEditor.SpritesheetController" name="void setGraphicColoursOnNode(dfEditor.CustomNode)" map="C"/>
  <method class="dfEditor.SpritesheetController" name="void addSpriteButtonActionPerformed(java.awt.event.ActionEvent)" map="U"/>
  <method class="dfEditor.SpritesheetController" name="void access$300(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="C"/>
  <method class="dfEditor.SpritesheetController" name="void access$1400(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="D"/>
  <method class="dfEditor.SpritesheetController" name="void refreshSpriteInfoPanel()" map="P"/>
  <method class="dfEditor.SpritesheetController" name="void nameTreePopup(java.awt.Point)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="void pack()" map="Q"/>
  <method class="dfEditor.SpritesheetController" name="void initImagePopupMenu()" map="R"/>
  <method class="dfEditor.SpritesheetController" name="void addSpriteAt(java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="void access$400(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="E"/>
  <method class="dfEditor.SpritesheetController" name="void removeSpriteButtonActionPerformed(java.awt.event.ActionEvent)" map="V"/>
  <method class="dfEditor.SpritesheetController" name="void graphicAdded(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="B"/>
  <method class="dfEditor.SpritesheetController" name="void imageModified()" map="O"/>
  <method class="dfEditor.SpritesheetController" name="void imageItemActionPerformed(java.awt.event.ActionEvent)" map="W"/>
  <method class="dfEditor.SpritesheetController" name="void removeSelectedSprites()" map="S"/>
  <method class="dfEditor.SpritesheetController" name="void initComponents()" map="T"/>
  <method class="dfEditor.SpritesheetController" name="void access$500(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="F"/>
  <method class="dfEditor.SpritesheetController" name="boolean load(java.lang.String, javax.swing.tree.DefaultTreeModel)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="boolean saveImage(java.io.File, java.lang.String)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="void nameTreeMousePressed(java.awt.event.MouseEvent)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="boolean saveAs()" map="D"/>
  <method class="dfEditor.SpritesheetController" name="void addDirToSelectedNode()" map="U"/>
  <method class="dfEditor.SpritesheetController" name="void graphicsErased(dfEditor.GraphicPanel, java.util.ArrayList)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="void access$600(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="G"/>
  <method class="dfEditor.SpritesheetController" name="boolean save()" map="G"/>
  <method class="dfEditor.SpritesheetController" name="void setGraphicColoursFromTree(dfEditor.SpriteTree)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="boolean saveImageAs()" map="V"/>
  <method class="dfEditor.SpritesheetController" name="void addDirItemActionPerformed(java.awt.event.ActionEvent)" map="X"/>
  <method class="dfEditor.SpritesheetController" name="void zoomOutButtonActionPerformed(java.awt.event.ActionEvent)" map="Y"/>
  <method class="dfEditor.SpritesheetController" name="void access$1000(dfEditor.SpritesheetController, javax.swing.event.TreeSelectionEvent)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="void access$700(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="H"/>
  <method class="dfEditor.SpritesheetController" name="void addFolderButtonActionPerformed(java.awt.event.ActionEvent)" map="Z"/>
  <method class="dfEditor.SpritesheetController" name="void access$900(dfEditor.SpritesheetController, java.awt.event.MouseEvent)" map="B"/>
  <method class="dfEditor.SpritesheetController" name="void addNodeToRectList(dfEditor.CustomNode, java.util.ArrayList)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="void graphicMoved(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="C"/>
  <method class="dfEditor.SpritesheetController" name="void access$1100(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="I"/>
  <method class="dfEditor.SpritesheetController" name="boolean saveCoordsAs()" map="W"/>
  <method class="dfEditor.SpritesheetController" name="void access$000(dfEditor.SpritesheetController)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="void imageButtonActionPerformed(java.awt.event.ActionEvent)" map="_"/>
  <method class="dfEditor.SpritesheetController" name="void nameTreeMouseReleased(java.awt.event.MouseEvent)" map="B"/>
  <method class="dfEditor.SpritesheetController" name="void access$100(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="J"/>
  <method class="dfEditor.SpritesheetController" name="void setTip()" map="X"/>
  <method class="dfEditor.SpritesheetController" name="void removeSpriteItemActionPerformed(java.awt.event.ActionEvent)" map="a"/>
  <method class="dfEditor.SpritesheetController" name="void access$1200(dfEditor.SpritesheetController, java.awt.event.ActionEvent)" map="K"/>
  <method class="dfEditor.SpritesheetController" name="void graphicErased(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="A"/>
  <method class="dfEditor.SpritesheetController" name="void nameTreeValueChanged(javax.swing.event.TreeSelectionEvent)" map="B"/>
  <method class="dfEditor.SpritesheetController" name="void showSetImageChooser()" map="Y"/>
  <method class="dfEditor.SpritesheetController" name="boolean hasBeenModified()" map="F"/>
  <method class="dfEditor.SpritesheetController" name="void graphicSelectionChanged(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="D"/>
  <method class="dfEditor.SpritesheetController" name="boolean saveCoords(java.io.File)" map="E"/>
  <class name="dfEditor.NodeDroppedListener" map="P"/>
  <method class="dfEditor.NodeDroppedListener" name="void nodeDropped(java.awt.Component, java.lang.String, java.awt.Point)" map="A"/>
  <class name="dfEditor.IntegerTextField" map="Q"/>
  <field class="dfEditor.IntegerTextField" name="badchars" map="A"/>
  <method class="dfEditor.IntegerTextField" name="void processKeyEvent(java.awt.event.KeyEvent)" map="processKeyEvent"/>
  <method class="dfEditor.IntegerTextField" name="int getNum()" map="A"/>
  <class name="dfEditor.GraphicPanel" map="R"/>
  <field class="dfEditor.GraphicPanel" name="_multiSelectRect" map="A"/>
  <field class="dfEditor.GraphicPanel" name="_keyDeltaY" map="B"/>
  <field class="dfEditor.GraphicPanel" name="_keyDeltaX" map="C"/>
  <field class="dfEditor.GraphicPanel" name="_lastClickPoint" map="D"/>
  <field class="dfEditor.GraphicPanel" name="_origin" map="E"/>
  <field class="dfEditor.GraphicPanel" name="_graphicBounds" map="F"/>
  <field class="dfEditor.GraphicPanel" name="_resizingGraphic" map="G"/>
  <field class="dfEditor.GraphicPanel" name="_lastOrigin" map="H"/>
  <field class="dfEditor.GraphicPanel" name="_movingGraphic" map="I"/>
  <field class="dfEditor.GraphicPanel" name="DRAG_BUTTON_2" map="J"/>
  <field class="dfEditor.GraphicPanel" name="DRAG_BUTTON" map="K"/>
  <field class="dfEditor.GraphicPanel" name="_zoom" map="L"/>
  <field class="dfEditor.GraphicPanel" name="_lastAddedGraphic" map="M"/>
  <field class="dfEditor.GraphicPanel" name="_mouseButtonPressed" map="N"/>
  <field class="dfEditor.GraphicPanel" name="_bAllowsEditing" map="O"/>
  <field class="dfEditor.GraphicPanel" name="_drawStack" map="P"/>
  <field class="dfEditor.GraphicPanel" name="_cmdManager" map="Q"/>
  <field class="dfEditor.GraphicPanel" name="_checkerBoard" map="R"/>
  <field class="dfEditor.GraphicPanel" name="_multiSelectFill" map="S"/>
  <field class="dfEditor.GraphicPanel" name="_resizeDirection" map="T"/>
  <field class="dfEditor.GraphicPanel" name="_changeListeners" map="U"/>
  <field class="dfEditor.GraphicPanel" name="SELECT_BUTTON" map="V"/>
  <method class="dfEditor.GraphicPanel" name="void mouseExited(java.awt.event.MouseEvent)" map="mouseExited"/>
  <method class="dfEditor.GraphicPanel" name="void selectGraphic(dfEditor.GraphicObject)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void drawStack(java.awt.Graphics, java.awt.Point, float, float)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void setOrigin(java.awt.Point)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void setEditable(boolean)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <method class="dfEditor.GraphicPanel" name="void dropGraphic(dfEditor.GraphicObject, boolean)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void mouseWheelMoved(java.awt.event.MouseWheelEvent)" map="mouseWheelMoved"/>
  <method class="dfEditor.GraphicPanel" name="void drawGraphicRotated(dfEditor.GraphicObject, java.awt.Graphics, java.awt.Point, float, float)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void removeGraphic(dfEditor.GraphicObject)" map="B"/>
  <method class="dfEditor.GraphicPanel" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <method class="dfEditor.GraphicPanel" name="void mouseMoved(java.awt.event.MouseEvent)" map="mouseMoved"/>
  <method class="dfEditor.GraphicPanel" name="void mouseEntered(java.awt.event.MouseEvent)" map="mouseEntered"/>
  <method class="dfEditor.GraphicPanel" name="void addGraphic(dfEditor.GraphicObject)" map="C"/>
  <method class="dfEditor.GraphicPanel" name="void drawCheckerBoardBuffer(java.awt.Graphics, java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void removeGraphicChangeListener(dfEditor.GraphicPanelChangeListener)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void unselectAllGraphics()" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void mouseDragged(java.awt.event.MouseEvent)" map="mouseDragged"/>
  <method class="dfEditor.GraphicPanel" name="java.awt.Rectangle getGraphicsBounds()" map="B"/>
  <method class="dfEditor.GraphicPanel" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <method class="dfEditor.GraphicPanel" name="java.awt.Point getOrigin()" map="C"/>
  <method class="dfEditor.GraphicPanel" name="void setCursor(int)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void setZoom(float)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void clear()" map="D"/>
  <method class="dfEditor.GraphicPanel" name="java.awt.Rectangle convertRectToViewRect(java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void mouseReleased(java.awt.event.MouseEvent)" map="mouseReleased"/>
  <method class="dfEditor.GraphicPanel" name="void dropAllGraphics()" map="E"/>
  <method class="dfEditor.GraphicPanel" name="void setCommandManager(dfEditor.command.CommandManager)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="boolean isFocusable()" map="isFocusable"/>
  <method class="dfEditor.GraphicPanel" name="void selectGraphic(dfEditor.GraphicObject, boolean)" map="B"/>
  <method class="dfEditor.GraphicPanel" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <method class="dfEditor.GraphicPanel" name="void dropAllGraphicsUndoable()" map="F"/>
  <method class="dfEditor.GraphicPanel" name="float getZoom()" map="G"/>
  <method class="dfEditor.GraphicPanel" name="void drawStack(java.awt.Graphics)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void addGraphicChangeListener(dfEditor.GraphicPanelChangeListener)" map="B"/>
  <method class="dfEditor.GraphicPanel" name="void setDrawStack(java.util.ArrayList)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void moveContent(java.awt.Point, java.awt.Point)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="dfEditor.GraphicPanel" name="void drawTransparencyCheckerBoard(java.awt.Graphics, java.awt.Rectangle)" map="B"/>
  <method class="dfEditor.GraphicPanel" name="java.awt.image.BufferedImage makeCheckerBoardBuffer(java.awt.Rectangle)" map="B"/>
  <method class="dfEditor.GraphicPanel" name="void setGraphicsBounds(java.awt.Rectangle)" map="C"/>
  <method class="dfEditor.GraphicPanel" name="void removeSelectedGraphics()" map="H"/>
  <method class="dfEditor.GraphicPanel" name="void unselectGraphic(dfEditor.GraphicObject)" map="D"/>
  <method class="dfEditor.GraphicPanel" name="void bringGraphicToFront(dfEditor.GraphicObject)" map="E"/>
  <method class="dfEditor.GraphicPanel" name="void sendGraphicToBack(dfEditor.GraphicObject)" map="F"/>
  <method class="dfEditor.GraphicPanel" name="void notifyGraphicMoved(dfEditor.GraphicObject)" map="G"/>
  <method class="dfEditor.GraphicPanel" name="int getResizeDirectionFromPointOnRect(java.awt.Point, java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.GraphicPanel" name="java.awt.Rectangle convertViewRectToRect(java.awt.Rectangle)" map="D"/>
  <method class="dfEditor.GraphicPanel" name="dfEditor.GraphicObject topGraphicAtPosition(java.awt.Point)" map="B"/>
  <method class="dfEditor.GraphicPanel" name="java.util.ArrayList selectedGraphics()" map="I"/>
  <method class="dfEditor.GraphicPanel" name="void setCursorToResizeCursor(int)" map="B"/>
  <method class="dfEditor.GraphicPanel" name="void draw(java.awt.Graphics)" map="B"/>
  <method class="dfEditor.GraphicPanel" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <method class="dfEditor.GraphicPanel" name="void listenForEvents(boolean)" map="B"/>
  <class name="dfEditor.TaskChangeListener" map="S"/>
  <method class="dfEditor.TaskChangeListener" name="void taskChanged(dfEditor.dfEditorTask)" map="A"/>
  <class name="dfEditor.CustomNodeTree$4" map="4"/>
  <field class="dfEditor.CustomNodeTree$4" name="this$0" map="A"/>
  <method class="dfEditor.CustomNodeTree$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.CustomNodeTree$3" map="3"/>
  <field class="dfEditor.CustomNodeTree$3" name="this$0" map="A"/>
  <method class="dfEditor.CustomNodeTree$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.CustomNodeTree$2" map="2"/>
  <field class="dfEditor.CustomNodeTree$2" name="this$0" map="A"/>
  <method class="dfEditor.CustomNodeTree$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.CustomNodeTree$1" map="1"/>
  <field class="dfEditor.CustomNodeTree$1" name="this$0" map="A"/>
  <method class="dfEditor.CustomNodeTree$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.CustomNodeTree" map="T"/>
  <field class="dfEditor.CustomNodeTree" name="removeNodeItem" map="C"/>
  <field class="dfEditor.CustomNodeTree" name="addDirItem" map="D"/>
  <field class="dfEditor.CustomNodeTree" name="spritePopupMenu" map="E"/>
  <field class="dfEditor.CustomNodeTree" name="removeDirItem" map="F"/>
  <field class="dfEditor.CustomNodeTree" name="newMenu" map="G"/>
  <field class="dfEditor.CustomNodeTree" name="addNodeItem" map="H"/>
  <field class="dfEditor.CustomNodeTree" name="dirPopupMenu" map="I"/>
  <method class="dfEditor.CustomNodeTree" name="void access$000(dfEditor.CustomNodeTree, java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.CustomNodeTree" name="void nameTreeValueChanged(javax.swing.event.TreeSelectionEvent)" map="A"/>
  <method class="dfEditor.CustomNodeTree" name="void nameTreeMousePressed(java.awt.event.MouseEvent)" map="A"/>
  <method class="dfEditor.CustomNodeTree" name="void initComponents()" map="G"/>
  <method class="dfEditor.CustomNodeTree" name="void nameTreeMouseReleased(java.awt.event.MouseEvent)" map="B"/>
  <method class="dfEditor.CustomNodeTree" name="void addDirItemActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.CustomNodeTree" name="void access$100(dfEditor.CustomNodeTree, java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.CustomNodeTree" name="void access$300(dfEditor.CustomNodeTree, java.awt.event.ActionEvent)" map="C"/>
  <method class="dfEditor.CustomNodeTree" name="void removeDirItemActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.CustomNodeTree" name="void removeNodeItemActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <method class="dfEditor.CustomNodeTree" name="void access$200(dfEditor.CustomNodeTree, java.awt.event.ActionEvent)" map="D"/>
  <method class="dfEditor.CustomNodeTree" name="void nameTreePopup(java.awt.Point)" map="A"/>
  <method class="dfEditor.CustomNodeTree" name="void addNodeItemActionPerformed(java.awt.event.ActionEvent)" map="D"/>
  <class name="dfEditor.SimpleGraphicPanel" map="U"/>
  <field class="dfEditor.SimpleGraphicPanel" name="graphic" map="A"/>
  <method class="dfEditor.SimpleGraphicPanel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="dfEditor.SimpleGraphicPanel" name="void setGraphic(dfEditor.GraphicObject)" map="A"/>
  <class name="dfEditor.dfEditorPanel" map="V"/>
  <field class="dfEditor.dfEditorPanel" name="taskChangeListener" map="A"/>
  <field class="dfEditor.dfEditorPanel" name="cmdManager" map="B"/>
  <field class="dfEditor.dfEditorPanel" name="bModified" map="C"/>
  <field class="dfEditor.dfEditorPanel" name="savedFile" map="D"/>
  <field class="dfEditor.dfEditorPanel" name="helpLabel" map="E"/>
  <field class="dfEditor.dfEditorPanel" name="fileChooser" map="F"/>
  <method class="dfEditor.dfEditorPanel" name="void setSavedFile(java.io.File)" map="A"/>
  <method class="dfEditor.dfEditorPanel" name="java.io.File getSavedFile()" map="A"/>
  <method class="dfEditor.dfEditorPanel" name="void undo()" map="B"/>
  <method class="dfEditor.dfEditorPanel" name="void refreshCommandManagerButtons()" map="C"/>
  <method class="dfEditor.dfEditorPanel" name="void commandStackChanged(dfEditor.command.CommandManager)" map="A"/>
  <method class="dfEditor.dfEditorPanel" name="boolean saveAs()" map="D"/>
  <method class="dfEditor.dfEditorPanel" name="java.lang.String getName()" map="getName"/>
  <method class="dfEditor.dfEditorPanel" name="void setModified(boolean)" map="A"/>
  <method class="dfEditor.dfEditorPanel" name="boolean hasBeenModified()" map="F"/>
  <method class="dfEditor.dfEditorPanel" name="void redo()" map="E"/>
  <method class="dfEditor.dfEditorPanel" name="void postInit()" map="H"/>
  <method class="dfEditor.dfEditorPanel" name="boolean save()" map="G"/>
  <class name="dfEditor.dfEditorAboutBox$4" map="4"/>
  <field class="dfEditor.dfEditorAboutBox$4" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorAboutBox$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.dfEditorAboutBox$3" map="3"/>
  <field class="dfEditor.dfEditorAboutBox$3" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorAboutBox$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.dfEditorAboutBox$2" map="2"/>
  <field class="dfEditor.dfEditorAboutBox$2" name="this$0" map="A"/>
  <method class="dfEditor.dfEditorAboutBox$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.dfEditorAboutBox$1" map="1"/>
  <field class="dfEditor.dfEditorAboutBox$1" name="this$0" map="A"/>
  <field class="dfEditor.dfEditorAboutBox$1" name="val$self" map="B"/>
  <field class="dfEditor.dfEditorAboutBox$1" name="count" map="C"/>
  <method class="dfEditor.dfEditorAboutBox$1" name="void run()" map="run"/>
  <field class="dfEditor.dfEditorAboutBox" name="jPanel1" map="A"/>
  <field class="dfEditor.dfEditorAboutBox" name="daysLeftLabel" map="B"/>
  <field class="dfEditor.dfEditorAboutBox" name="jTextArea1" map="C"/>
  <field class="dfEditor.dfEditorAboutBox" name="licenseTextField" map="D"/>
  <field class="dfEditor.dfEditorAboutBox" name="registerButton" map="E"/>
  <field class="dfEditor.dfEditorAboutBox" name="jScrollPane1" map="F"/>
  <field class="dfEditor.dfEditorAboutBox" name="CloseButton" map="G"/>
  <field class="dfEditor.dfEditorAboutBox" name="countDownTimer" map="H"/>
  <field class="dfEditor.dfEditorAboutBox" name="parent" map="I"/>
  <method class="dfEditor.dfEditorAboutBox" name="void access$100(dfEditor.dfEditorAboutBox, java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.dfEditorAboutBox" name="void initComponents()" map="A"/>
  <method class="dfEditor.dfEditorAboutBox" name="void licenseTextFieldActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.dfEditorAboutBox" name="void checkRegKey()" map="B"/>
  <method class="dfEditor.dfEditorAboutBox" name="void registerButtonActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.dfEditorAboutBox" name="javax.swing.JButton access$000(dfEditor.dfEditorAboutBox)" map="A"/>
  <method class="dfEditor.dfEditorAboutBox" name="void access$300(dfEditor.dfEditorAboutBox, java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.dfEditorAboutBox" name="void closeAboutBox()" map="C"/>
  <method class="dfEditor.dfEditorAboutBox" name="void access$200(dfEditor.dfEditorAboutBox, java.awt.event.ActionEvent)" map="C"/>
  <method class="dfEditor.dfEditorAboutBox" name="void CloseButtonActionPerformed(java.awt.event.ActionEvent)" map="C"/>
  <class name="dfEditor.MathUtil" map="W"/>
  <method class="dfEditor.MathUtil" name="java.awt.Point dividePoint(java.awt.Point, float)" map="A"/>
  <method class="dfEditor.MathUtil" name="boolean rectCollide(java.awt.Rectangle, java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.MathUtil" name="java.awt.Point rotatePoint2D(java.awt.Point, float)" map="B"/>
  <method class="dfEditor.MathUtil" name="boolean pointRectCollide(java.awt.Point, java.awt.Rectangle)" map="A"/>
  <method class="dfEditor.MathUtil" name="java.awt.Point multiplyPoint(java.awt.Point, float)" map="C"/>
  <class name="dfEditor.CustomNode" map="X"/>
  <field class="dfEditor.CustomNode" name="childDirUniqueID" map="A"/>
  <field class="dfEditor.CustomNode" name="isLeaf" map="B"/>
  <field class="dfEditor.CustomNode" name="childLeafUniqueID" map="C"/>
  <field class="dfEditor.CustomNode" name="_object" map="D"/>
  <field class="dfEditor.CustomNode" name="colour" map="E"/>
  <method class="dfEditor.CustomNode" name="java.lang.String suggestNameForChildLeaf()" map="A"/>
  <method class="dfEditor.CustomNode" name="void setCustomObject(java.lang.Object)" map="A"/>
  <method class="dfEditor.CustomNode" name="java.lang.String suggestNameForChildDir()" map="B"/>
  <method class="dfEditor.CustomNode" name="java.lang.String getFullPathName()" map="C"/>
  <method class="dfEditor.CustomNode" name="void setColour(java.awt.Color)" map="A"/>
  <method class="dfEditor.CustomNode" name="java.awt.Color getColour()" map="D"/>
  <method class="dfEditor.CustomNode" name="boolean isLeaf()" map="isLeaf"/>
  <method class="dfEditor.CustomNode" name="java.lang.Object getCustomObject()" map="E"/>
  <class name="dfEditor.SingleOrMultiDialog$3$1" map="1"/>
  <field class="dfEditor.SingleOrMultiDialog$3$1" name="this$0" map="A"/>
  <method class="dfEditor.SingleOrMultiDialog$3$1" name="void windowClosing(java.awt.event.WindowEvent)" map="windowClosing"/>
  <class name="dfEditor.SingleOrMultiDialog$3" map="3"/>
  <method class="dfEditor.SingleOrMultiDialog$3" name="void run()" map="run"/>
  <class name="dfEditor.SingleOrMultiDialog$2" map="2"/>
  <field class="dfEditor.SingleOrMultiDialog$2" name="this$0" map="A"/>
  <method class="dfEditor.SingleOrMultiDialog$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="dfEditor.SingleOrMultiDialog$1" map="1"/>
  <field class="dfEditor.SingleOrMultiDialog$1" name="this$0" map="A"/>
  <method class="dfEditor.SingleOrMultiDialog$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="dfEditor.SingleOrMultiDialog" name="singleButton" map="A"/>
  <field class="dfEditor.SingleOrMultiDialog" name="multiButton" map="B"/>
  <field class="dfEditor.SingleOrMultiDialog" name="selectedButton" map="C"/>
  <field class="dfEditor.SingleOrMultiDialog" name="jLabel2" map="D"/>
  <field class="dfEditor.SingleOrMultiDialog" name="jLabel1" map="E"/>
  <method class="dfEditor.SingleOrMultiDialog" name="void main(java.lang.String[])" map="A"/>
  <method class="dfEditor.SingleOrMultiDialog" name="void multiButtonActionPerformed(java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.SingleOrMultiDialog" name="void access$000(dfEditor.SingleOrMultiDialog, java.awt.event.ActionEvent)" map="A"/>
  <method class="dfEditor.SingleOrMultiDialog" name="void initComponents()" map="A"/>
  <method class="dfEditor.SingleOrMultiDialog" name="void singleButtonActionPerformed(java.awt.event.ActionEvent)" map="B"/>
  <method class="dfEditor.SingleOrMultiDialog" name="int showDialog()" map="B"/>
  <method class="dfEditor.SingleOrMultiDialog" name="void access$100(dfEditor.SingleOrMultiDialog, java.awt.event.ActionEvent)" map="B"/>
  <class name="dfEditor.PixelBuffer" map="Y"/>
  <field class="dfEditor.PixelBuffer" name="_bHasTransparentPixels" map="A"/>
  <field class="dfEditor.PixelBuffer" name="markArray" map="B"/>
  <field class="dfEditor.PixelBuffer" name="_img" map="C"/>
  <field class="dfEditor.PixelBuffer" name="_imgW" map="D"/>
  <field class="dfEditor.PixelBuffer" name="pixelArray" map="E"/>
  <field class="dfEditor.PixelBuffer" name="_imgH" map="F"/>
  <method class="dfEditor.PixelBuffer" name="boolean isNeighbourOfMarkedPixel(int, int)" map="A"/>
  <method class="dfEditor.PixelBuffer" name="java.awt.Rectangle getRectAroundSpriteAtPoint(java.awt.Point)" map="A"/>
  <method class="dfEditor.PixelBuffer" name="boolean pixelIsMarked(int, int)" map="B"/>
  <method class="dfEditor.PixelBuffer" name="boolean isTransparentAt(int, int)" map="C"/>
  <method class="dfEditor.PixelBuffer" name="void makeColourTransparent(int)" map="A"/>
  <method class="dfEditor.PixelBuffer" name="boolean hasTransparentPixels()" map="A"/>
  <method class="dfEditor.PixelBuffer" name="java.awt.image.BufferedImage getImage()" map="B"/>
  <method class="dfEditor.PixelBuffer" name="int pixelAt(int, int)" map="D"/>
  <method class="dfEditor.PixelBuffer" name="boolean markPixel(int, int, boolean)" map="A"/>
  <method class="dfEditor.PixelBuffer" name="void markInfectNonTransparents(int, int)" map="E"/>
  <method class="dfEditor.PixelBuffer" name="void trimRect(java.awt.Rectangle)" map="A"/>
  <class name="dfEditor.SpritesheetPanel" map="Z"/>
  <field class="dfEditor.SpritesheetPanel" name="_pix" map="Y"/>
  <field class="dfEditor.SpritesheetPanel" name="_controller" map="Z"/>
  <field class="dfEditor.SpritesheetPanel" name="_imgModifiedListener" map="_"/>
  <method class="dfEditor.SpritesheetPanel" name="void setZoom(float)" map="A"/>
  <method class="dfEditor.SpritesheetPanel" name="void graphicSelectionChanged(dfEditor.GraphicPanel, dfEditor.GraphicObject)" map="A"/>
  <method class="dfEditor.SpritesheetPanel" name="void setController(dfEditor.SpritesheetController)" map="A"/>
  <method class="dfEditor.SpritesheetPanel" name="void draw(java.awt.Graphics)" map="B"/>
  <method class="dfEditor.SpritesheetPanel" name="void enterColourPickerMode(dfEditor.ImageModifiedListener)" map="A"/>
  <method class="dfEditor.SpritesheetPanel" name="boolean hasTransparentPixels()" map="L"/>
  <method class="dfEditor.SpritesheetPanel" name="java.awt.Rectangle suggestVisibleSpriteRect()" map="M"/>
  <method class="dfEditor.SpritesheetPanel" name="java.awt.image.BufferedImage getImage()" map="N"/>
  <method class="dfEditor.SpritesheetPanel" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <method class="dfEditor.SpritesheetPanel" name="void setImage(java.awt.image.BufferedImage)" map="A"/>
  <method class="dfEditor.SpritesheetPanel" name="java.awt.Point actualImageSize()" map="O"/>
  <class name="dfEditor.ImageUtil" map="_"/>
  <method class="dfEditor.ImageUtil" name="java.awt.image.VolatileImage createVolatileImage(int, int, int)" map="A"/>
  <method class="dfEditor.ImageUtil" name="java.awt.image.VolatileImage createVolatileImage(java.awt.image.BufferedImage)" map="A"/>
  <class name="dfEditor.SelectionBox" map="a"/>
  <field class="dfEditor.SelectionBox" name="_colInner" map="J"/>
  <field class="dfEditor.SelectionBox" name="_colOuter" map="K"/>
  <field class="dfEditor.SelectionBox" name="_colSelected" map="L"/>
  <method class="dfEditor.SelectionBox" name="void setColour(java.awt.Color)" map="A"/>
  <method class="dfEditor.SelectionBox" name="void draw(java.awt.Graphics, java.awt.Point, float, boolean)" map="A"/>
  <package name="com" map="A"/>
  <package name="com.generationjava" map="A"/>
  <package name="com.generationjava.io" map="A"/>
  <package name="com.generationjava.io.xml" map="A"/>
  <class name="com.generationjava.io.xml.AbstractXmlWriter" map="A"/>
  <method class="com.generationjava.io.xml.AbstractXmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion()" map="C"/>
  <method class="com.generationjava.io.xml.AbstractXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEmptyEntity(java.lang.String)" map="C"/>
  <method class="com.generationjava.io.xml.AbstractXmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion(java.lang.String, java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.AbstractXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntityWithText(java.lang.String, java.lang.Object)" map="B"/>
  <class name="com.generationjava.io.xml.FormattingXmlWriter" map="B"/>
  <field class="com.generationjava.io.xml.FormattingXmlWriter" name="numberFormat" map="B"/>
  <field class="com.generationjava.io.xml.FormattingXmlWriter" name="dateFormat" map="C"/>
  <method class="com.generationjava.io.xml.FormattingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeText(java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.FormattingXmlWriter" name="com.generationjava.io.xml.FormattingXmlWriter setNumberFormat(java.text.NumberFormat)" map="A"/>
  <method class="com.generationjava.io.xml.FormattingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeAttribute(java.lang.String, java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.FormattingXmlWriter" name="java.lang.String format(java.lang.Object)" map="B"/>
  <method class="com.generationjava.io.xml.FormattingXmlWriter" name="com.generationjava.io.xml.FormattingXmlWriter setDateFormat(java.text.DateFormat)" map="A"/>
  <method class="com.generationjava.io.xml.FormattingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntityWithText(java.lang.String, java.lang.Object)" map="B"/>
  <class name="com.generationjava.io.xml.PrettyPrinterXmlWriter" map="C"/>
  <field class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="indent" map="D"/>
  <field class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="indentSize" map="E"/>
  <field class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="newline" map="F"/>
  <field class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="closed" map="G"/>
  <field class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="wroteText" map="H"/>
  <field class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="empty" map="I"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter setIndent(java.lang.String)" map="E"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntity(java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter writeText(java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="void indentChunk()" map="E"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEmptyEntity(java.lang.String)" map="C"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntityWithText(java.lang.String, java.lang.Object)" map="B"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter writeComment(java.lang.String)" map="B"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion(java.lang.String, java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion()" map="C"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter endEntity()" map="D"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter writeCData(java.lang.String)" map="D"/>
  <method class="com.generationjava.io.xml.PrettyPrinterXmlWriter" name="com.generationjava.io.xml.XmlWriter setNewline(java.lang.String)" map="F"/>
  <class name="com.generationjava.io.xml.XmlEncXmlWriter" map="D"/>
  <field class="com.generationjava.io.xml.XmlEncXmlWriter" name="closed" map="U"/>
  <field class="com.generationjava.io.xml.XmlEncXmlWriter" name="namespace" map="V"/>
  <field class="com.generationjava.io.xml.XmlEncXmlWriter" name="xmlenc" map="W"/>
  <field class="com.generationjava.io.xml.XmlEncXmlWriter" name="writer" map="X"/>
  <field class="com.generationjava.io.xml.XmlEncXmlWriter" name="empty" map="Y"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="java.io.Writer getWriter()" map="A"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="void closeOpeningTag()" map="H"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="void close()" map="B"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="com.generationjava.io.xml.XmlWriter writeAttribute(java.lang.String, java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="com.generationjava.io.xml.XmlWriter openEntity(java.lang.String)" map="G"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="com.generationjava.io.xml.XmlWriter writeText(java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntity(java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="com.generationjava.io.xml.XmlWriter writeComment(java.lang.String)" map="B"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="com.generationjava.io.xml.XmlWriter endEntity()" map="D"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="com.generationjava.io.xml.XmlWriter writeCData(java.lang.String)" map="D"/>
  <method class="com.generationjava.io.xml.XmlEncXmlWriter" name="void setDefaultNamespace(java.lang.String)" map="H"/>
  <class name="com.generationjava.io.xml.JarvWriter" map="E"/>
  <field class="com.generationjava.io.xml.JarvWriter" name="tag" map="J"/>
  <field class="com.generationjava.io.xml.JarvWriter" name="attrs" map="K"/>
  <field class="com.generationjava.io.xml.JarvWriter" name="text" map="L"/>
  <field class="com.generationjava.io.xml.JarvWriter" name="verifierHandler" map="M"/>
  <method class="com.generationjava.io.xml.JarvWriter" name="void warning(org.xml.sax.SAXParseException)" map="warning"/>
  <method class="com.generationjava.io.xml.JarvWriter" name="java.lang.String getDefaultNamespace()" map="F"/>
  <method class="com.generationjava.io.xml.JarvWriter" name="void close()" map="B"/>
  <method class="com.generationjava.io.xml.JarvWriter" name="com.generationjava.io.xml.XmlWriter writeAttribute(java.lang.String, java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.JarvWriter" name="void fatalError(org.xml.sax.SAXParseException)" map="fatalError"/>
  <method class="com.generationjava.io.xml.JarvWriter" name="void checkSchema()" map="G"/>
  <method class="com.generationjava.io.xml.JarvWriter" name="com.generationjava.io.xml.XmlWriter writeEntity(java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.JarvWriter" name="com.generationjava.io.xml.XmlWriter writeText(java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.JarvWriter" name="void error(org.xml.sax.SAXParseException)" map="error"/>
  <method class="com.generationjava.io.xml.JarvWriter" name="com.generationjava.io.xml.XmlWriter endEntity()" map="D"/>
  <class name="com.generationjava.io.xml.DelegatingXmlWriter" map="F"/>
  <field class="com.generationjava.io.xml.DelegatingXmlWriter" name="xmlWriter" map="A"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="java.io.Writer getWriter()" map="A"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="void close()" map="B"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeAttribute(java.lang.String, java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeText(java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntity(java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeComment(java.lang.String)" map="B"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntityWithText(java.lang.String, java.lang.Object)" map="B"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion(java.lang.String, java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEmptyEntity(java.lang.String)" map="C"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion()" map="C"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter endEntity()" map="D"/>
  <method class="com.generationjava.io.xml.DelegatingXmlWriter" name="com.generationjava.io.xml.XmlWriter writeCData(java.lang.String)" map="D"/>
  <class name="com.generationjava.io.xml.XmlWriter" map="G"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="java.io.Writer getWriter()" map="A"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="void close()" map="B"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter writeAttribute(java.lang.String, java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter writeText(java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntity(java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter writeComment(java.lang.String)" map="B"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntityWithText(java.lang.String, java.lang.Object)" map="B"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion(java.lang.String, java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter writeEmptyEntity(java.lang.String)" map="C"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion()" map="C"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter endEntity()" map="D"/>
  <method class="com.generationjava.io.xml.XmlWriter" name="com.generationjava.io.xml.XmlWriter writeCData(java.lang.String)" map="D"/>
  <class name="com.generationjava.io.xml.SimpleXmlWriter" map="H"/>
  <field class="com.generationjava.io.xml.SimpleXmlWriter" name="stack" map="Z"/>
  <field class="com.generationjava.io.xml.SimpleXmlWriter" name="closed" map="_"/>
  <field class="com.generationjava.io.xml.SimpleXmlWriter" name="attrs" map="a"/>
  <field class="com.generationjava.io.xml.SimpleXmlWriter" name="namespace" map="b"/>
  <field class="com.generationjava.io.xml.SimpleXmlWriter" name="empty" map="c"/>
  <field class="com.generationjava.io.xml.SimpleXmlWriter" name="writer" map="d"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="java.io.Writer getWriter()" map="A"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="com.generationjava.io.xml.XmlWriter writeXmlVersion(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="java.lang.String getDefaultNamespace()" map="I"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="void closeOpeningTag()" map="J"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="void close()" map="B"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="com.generationjava.io.xml.XmlWriter writeAttribute(java.lang.String, java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="void writeChunk(java.lang.String)" map="I"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="com.generationjava.io.xml.XmlWriter writeText(java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntity(java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="com.generationjava.io.xml.XmlWriter writeComment(java.lang.String)" map="B"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="com.generationjava.io.xml.XmlWriter endEntity()" map="D"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="com.generationjava.io.xml.XmlWriter writeCData(java.lang.String)" map="D"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="void setDefaultNamespace(java.lang.String)" map="J"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="com.generationjava.io.xml.SimpleXmlWriter openEntity(java.lang.String)" map="K"/>
  <method class="com.generationjava.io.xml.SimpleXmlWriter" name="void writeAttributes()" map="K"/>
  <class name="com.generationjava.io.xml.EmptyElementXmlWriter" map="I"/>
  <field class="com.generationjava.io.xml.EmptyElementXmlWriter" name="emptyMode" map="N"/>
  <field class="com.generationjava.io.xml.EmptyElementXmlWriter" name="IGNORE_EMPTY_MODE" map="O"/>
  <field class="com.generationjava.io.xml.EmptyElementXmlWriter" name="closed" map="P"/>
  <field class="com.generationjava.io.xml.EmptyElementXmlWriter" name="attrs" map="Q"/>
  <field class="com.generationjava.io.xml.EmptyElementXmlWriter" name="EMPTY_MODE" map="R"/>
  <field class="com.generationjava.io.xml.EmptyElementXmlWriter" name="empty" map="S"/>
  <field class="com.generationjava.io.xml.EmptyElementXmlWriter" name="NULL_EMPTY_MODE" map="T"/>
  <method class="com.generationjava.io.xml.EmptyElementXmlWriter" name="com.generationjava.io.xml.XmlWriter writeComment(java.lang.String)" map="B"/>
  <method class="com.generationjava.io.xml.EmptyElementXmlWriter" name="com.generationjava.io.xml.XmlWriter writeCData(java.lang.String)" map="D"/>
  <method class="com.generationjava.io.xml.EmptyElementXmlWriter" name="com.generationjava.io.xml.XmlWriter writeText(java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.EmptyElementXmlWriter" name="com.generationjava.io.xml.XmlWriter writeAttribute(java.lang.String, java.lang.Object)" map="A"/>
  <method class="com.generationjava.io.xml.EmptyElementXmlWriter" name="com.generationjava.io.xml.XmlWriter writeEntity(java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.EmptyElementXmlWriter" name="boolean checkEmpty(java.lang.Object)" map="C"/>
  <method class="com.generationjava.io.xml.EmptyElementXmlWriter" name="com.generationjava.io.xml.XmlWriter setEmptyMode(java.lang.Object)" map="D"/>
  <class name="com.generationjava.io.xml.XmlUtils" map="J"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="java.lang.String removeXml(java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="java.lang.String unescapeXml(java.lang.String)" map="B"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="java.lang.String escapeXml(java.lang.String)" map="C"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="int getIndexOpeningTag(java.lang.String, java.lang.String, int)" map="A"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="java.lang.String getAttribute(java.lang.String, java.lang.String)" map="A"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="int countMatches(java.lang.String, java.lang.String)" map="B"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="int getIndexOpeningTag(java.lang.String, java.lang.String)" map="C"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="java.lang.String getAttribute(java.lang.String, java.lang.String, int)" map="B"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="int getIndexClosingTag(java.lang.String, java.lang.String, int)" map="C"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="int getIndexClosingTag(java.lang.String, java.lang.String)" map="D"/>
  <method class="com.generationjava.io.xml.XmlUtils" name="java.lang.String getContent(java.lang.String, java.lang.String)" map="E"/>
  <class name="AutoRipper$DirectoryFileFilter" map="_A"/>
  <method class="AutoRipper$DirectoryFileFilter" name="boolean accept(java.io.File)" map="accept"/>
  <method class="AutoRipper$DirectoryFileFilter" name="java.lang.String getDescription()" map="getDescription"/>
  <class name="AutoRipper$ImageFileFilter" map="_B"/>
  <method class="AutoRipper$ImageFileFilter" name="boolean accept(java.io.File)" map="accept"/>
  <method class="AutoRipper$ImageFileFilter" name="java.lang.String getDescription()" map="getDescription"/>
  <class name="AutoRipper$1" map="1"/>
  <class name="AutoRipper" map="A"/>
  <field class="AutoRipper" name="tolerance" map="A"/>
  <field class="AutoRipper" name="color" map="B"/>
  <field class="AutoRipper" name="spriteSheet" map="C"/>
  <field class="AutoRipper" name="sprites" map="D"/>
  <method class="AutoRipper" name="void addSprite(int, int, int, int)" map="A"/>
  <method class="AutoRipper" name="void scanAutomaticallyIteratively()" map="A"/>
  <method class="AutoRipper" name="void saveSprites()" map="B"/>
  <method class="AutoRipper" name="void main(java.lang.String[])" map="A"/>
  <method class="AutoRipper" name="java.lang.String chooseSaveDirectory()" map="C"/>
  <method class="AutoRipper" name="boolean inBounds(int, int)" map="A"/>
  <method class="AutoRipper" name="void addSpriteFromPixelList(java.util.ArrayList, int)" map="A"/>
  <method class="AutoRipper" name="boolean pixelIsTransparent(int, int)" map="B"/>
  <method class="AutoRipper" name="java.awt.image.BufferedImage open()" map="D"/>
</map>
</yguard>
